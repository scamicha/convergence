%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: Figure5.pdf
%%Creator: Adobe Acrobat 9.0.0
%%For: tomsc
%%CreationDate: 3/6/11, 11:04 AM
%%BoundingBox: 0 0 792 612
%%HiResBoundingBox: 0 0 792 612
%%CropBox: 0 0 792 612
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors: (atend)
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$None SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 553 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.2.1-c041 52.342996, 2008/05/07-21:37:19        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
   xmp:CreateDate="2011-01-04T18:22:49Z"
   xmp:ModifyDate="2011-01-04T18:22:49Z"
   pdf:Producer="Mac OS X 10.6.4 Quartz PDFContext"
   dc:format="application/pdf"/>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -612 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 612 li
792 612 li
792 0 li
cp
clp
[1 0 0 1 0 0 ]ct
gsave
0 612 mo
792 612 li
792 0 li
0 0 li
cp
clp
1.8 lw
1 lc
1 lj
10 ml
[] 0 dsh
true sadj
207 179.64 mo
622.728 179.64 li
622.728 81.36 li
207 81.36 li
207 179.64 li
207 172.512 li
223.632 179.64 mo
223.632 176.04 li
240.264 179.64 mo
240.264 176.04 li
256.896 179.64 mo
256.896 176.04 li
273.528 179.64 mo
273.528 176.04 li
290.16 179.64 mo
290.16 172.512 li
306.792 179.64 mo
306.792 176.04 li
323.424 179.64 mo
323.424 176.04 li
340.056 179.64 mo
340.056 176.04 li
356.688 179.64 mo
356.688 176.04 li
373.32 179.64 mo
373.32 172.512 li
389.952 179.64 mo
389.952 176.04 li
406.512 179.64 mo
406.512 176.04 li
423.144 179.64 mo
423.144 176.04 li
439.776 179.64 mo
439.776 176.04 li
456.408 179.64 mo
456.408 172.512 li
473.04 179.64 mo
473.04 176.04 li
489.672 179.64 mo
489.672 176.04 li
506.304 179.64 mo
506.304 176.04 li
522.936 179.64 mo
522.936 176.04 li
539.568 179.64 mo
539.568 172.512 li
556.2 179.64 mo
556.2 176.04 li
572.832 179.64 mo
572.832 176.04 li
589.464 179.64 mo
589.464 176.04 li
606.096 179.64 mo
606.096 176.04 li
622.728 179.64 mo
622.728 172.512 li
207 88.488 mo
207 81.36 li
223.632 84.888 mo
223.632 81.36 li
240.264 84.888 mo
240.264 81.36 li
256.896 84.888 mo
256.896 81.36 li
273.528 84.888 mo
273.528 81.36 li
290.16 88.488 mo
290.16 81.36 li
306.792 84.888 mo
306.792 81.36 li
323.424 84.888 mo
323.424 81.36 li
340.056 84.888 mo
340.056 81.36 li
356.688 84.888 mo
356.688 81.36 li
373.32 88.488 mo
373.32 81.36 li
389.952 84.888 mo
389.952 81.36 li
406.512 84.888 mo
406.512 81.36 li
423.144 84.888 mo
423.144 81.36 li
439.776 84.888 mo
439.776 81.36 li
456.408 88.488 mo
456.408 81.36 li
473.04 84.888 mo
473.04 81.36 li
489.672 84.888 mo
489.672 81.36 li
506.304 84.888 mo
506.304 81.36 li
522.936 84.888 mo
522.936 81.36 li
539.568 88.488 mo
539.568 81.36 li
556.2 84.888 mo
556.2 81.36 li
572.832 84.888 mo
572.832 81.36 li
589.464 84.888 mo
589.464 81.36 li
606.096 84.888 mo
606.096 81.36 li
622.728 88.488 mo
622.728 81.36 li
207 179.64 mo
214.128 179.64 li
207 167.328 mo
210.528 167.328 li
207 155.088 mo
214.128 155.088 li
207 142.776 mo
210.528 142.776 li
207 130.464 mo
214.128 130.464 li
207 118.224 mo
210.528 118.224 li
207 105.912 mo
214.128 105.912 li
207 93.672 mo
210.528 93.672 li
207 81.36 mo
214.128 81.36 li
615.6 179.64 mo
622.728 179.64 li
false sop
/0 
<<
/Name (Black)
/0 
[/DeviceCMYK] /CSA add_res
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
1 sep
@
619.2 167.328 mo
622.728 167.328 li
615.6 155.088 mo
622.728 155.088 li
619.2 142.776 mo
622.728 142.776 li
615.6 130.464 mo
622.728 130.464 li
619.2 118.224 mo
622.728 118.224 li
615.6 105.912 mo
622.728 105.912 li
619.2 93.672 mo
622.728 93.672 li
615.6 81.36 mo
622.728 81.36 li
189.432 180.144 mo
189.936 181.728 li
191.52 182.736 li
194.112 183.24 li
195.696 183.24 li
198.288 182.736 li
199.8 181.728 li
200.304 180.144 li
200.304 179.136 li
199.8 177.552 li
198.288 176.544 li
195.696 175.968 li
194.112 175.968 li
191.52 176.544 li
189.936 177.552 li
189.432 179.136 li
189.432 180.144 li
189.432 128.952 mo
196.704 134.136 li
196.704 126.36 li
189.432 128.952 mo
200.304 128.952 li
223.56 96.624 mo
223.056 95.544 li
221.544 95.04 li
220.464 95.04 li
218.952 95.544 li
217.872 97.1281 li
217.368 99.72 li
217.368 102.312 li
217.872 104.4 li
218.952 105.408 li
220.464 105.912 li
220.968 105.912 li
222.552 105.408 li
223.56 104.4 li
224.136 102.816 li
224.136 102.312 li
223.56 100.728 li
222.552 99.72 li
220.968 99.216 li
220.464 99.216 li
218.952 99.72 li
217.872 100.728 li
217.368 102.312 li
232.416 95.04 mo
227.232 102.312 li
235.008 102.312 li
232.416 95.04 mo
232.416 105.912 li
@
1.44 lw
481.392 98.5681 mo
522.936 98.5681 li
@
1.08 lw
532.656 93.744 mo
532.656 101.016 li
532.656 93.744 mo
535.392 101.016 li
538.2 93.744 mo
535.392 101.016 li
538.2 93.744 mo
538.2 101.016 li
540.936 96.84 mo
547.2 96.84 li
540.936 98.928 mo
547.2 98.928 li
551.664 93.744 mo
548.928 101.016 li
551.664 93.744 mo
554.4 101.016 li
549.936 98.5681 mo
553.392 98.5681 li
556.128 93.744 mo
556.128 101.016 li
558.936 93.744 mo
558.936 101.016 li
@
1.44 lw
481.392 110.808 mo
490.392 110.808 li
497.088 110.808 mo
498.24 110.808 li
504.936 110.808 mo
506.088 110.808 li
512.856 110.808 mo
513.936 110.808 li
520.704 110.808 mo
522.936 110.808 li
@
1.08 lw
532.656 106.056 mo
532.656 113.256 li
532.656 106.056 mo
535.392 113.256 li
538.2 106.056 mo
535.392 113.256 li
538.2 106.056 mo
538.2 113.256 li
540.936 109.152 mo
547.2 109.152 li
540.936 111.24 mo
547.2 111.24 li
550.656 107.424 mo
551.304 107.064 li
552.384 106.056 li
552.384 113.256 li
557.568 112.968 mo
557.208 113.256 li
556.848 112.968 li
557.208 112.608 li
557.568 112.968 li
557.568 113.616 li
557.208 114.336 li
556.848 114.696 li
560.304 107.784 mo
560.304 107.424 li
560.664 106.704 li
561.024 106.344 li
561.672 106.056 li
563.04 106.056 li
563.76 106.344 li
564.12 106.704 li
564.48 107.424 li
564.48 108.072 li
564.12 108.792 li
563.4 109.8 li
559.944 113.256 li
564.768 113.256 li
567.936 112.968 mo
567.576 113.256 li
567.216 112.968 li
567.576 112.608 li
567.936 112.968 li
567.936 113.616 li
567.576 114.336 li
567.216 114.696 li
571.032 106.056 mo
574.848 106.056 li
572.76 108.792 li
573.768 108.792 li
574.488 109.152 li
574.848 109.512 li
575.136 110.52 li
575.136 111.24 li
574.848 112.248 li
574.128 112.968 li
573.12 113.256 li
572.04 113.256 li
571.032 112.968 li
570.672 112.608 li
570.312 111.888 li
578.304 112.968 mo
577.944 113.256 li
577.584 112.968 li
577.944 112.608 li
578.304 112.968 li
578.304 113.616 li
577.944 114.336 li
577.584 114.696 li
584.136 106.056 mo
580.68 110.88 li
585.864 110.88 li
584.136 106.056 mo
584.136 113.256 li
588.672 112.968 mo
588.312 113.256 li
587.952 112.968 li
588.312 112.608 li
588.672 112.968 li
588.672 113.616 li
588.312 114.336 li
587.952 114.696 li
595.224 106.056 mo
591.768 106.056 li
591.408 109.152 li
591.768 108.792 li
592.776 108.432 li
593.856 108.432 li
594.864 108.792 li
595.584 109.512 li
595.872 110.52 li
595.872 111.24 li
595.584 112.248 li
594.864 112.968 li
593.856 113.256 li
592.776 113.256 li
591.768 112.968 li
591.408 112.608 li
591.048 111.888 li
@
1.44 lw
481.392 123.12 mo
482.472 123.12 li
489.24 123.12 mo
490.392 123.12 li
497.088 123.12 mo
498.24 123.12 li
504.936 123.12 mo
506.088 123.12 li
512.856 123.12 mo
513.936 123.12 li
520.704 123.12 mo
521.784 123.12 li
@
1.08 lw
532.656 118.296 mo
532.656 125.568 li
532.656 118.296 mo
535.392 125.568 li
538.2 118.296 mo
535.392 125.568 li
538.2 118.296 mo
538.2 125.568 li
540.936 121.392 mo
547.2 121.392 li
540.936 123.48 mo
547.2 123.48 li
550.656 119.664 mo
551.304 119.376 li
552.384 118.296 li
552.384 125.568 li
557.568 125.208 mo
557.208 125.568 li
556.848 125.208 li
557.208 124.848 li
557.568 125.208 li
557.568 125.928 li
557.208 126.576 li
556.848 126.936 li
560.304 120.024 mo
560.304 119.664 li
560.664 119.016 li
561.024 118.656 li
561.672 118.296 li
563.04 118.296 li
563.76 118.656 li
564.12 119.016 li
564.48 119.664 li
564.48 120.384 li
564.12 121.104 li
563.4 122.112 li
559.944 125.568 li
564.768 125.568 li
567.936 125.208 mo
567.576 125.568 li
567.216 125.208 li
567.576 124.848 li
567.936 125.208 li
567.936 125.928 li
567.576 126.576 li
567.216 126.936 li
571.032 118.296 mo
574.848 118.296 li
572.76 121.104 li
573.768 121.104 li
574.488 121.392 li
574.848 121.752 li
575.136 122.832 li
575.136 123.48 li
574.848 124.56 li
574.128 125.208 li
573.12 125.568 li
572.04 125.568 li
571.032 125.208 li
570.672 124.848 li
570.312 124.2 li
578.304 125.208 mo
577.944 125.568 li
577.584 125.208 li
577.944 124.848 li
578.304 125.208 li
578.304 125.928 li
577.944 126.576 li
577.584 126.936 li
584.136 118.296 mo
580.68 123.12 li
585.864 123.12 li
584.136 118.296 mo
584.136 125.568 li
@
1.44 lw
481.392 135.432 mo
490.392 135.432 li
497.088 135.432 mo
498.24 135.432 li
504.936 135.432 mo
513.936 135.432 li
520.704 135.432 mo
521.784 135.432 li
@
1.08 lw
532.656 130.608 mo
532.656 137.88 li
532.656 130.608 mo
535.392 137.88 li
538.2 130.608 mo
535.392 137.88 li
538.2 130.608 mo
538.2 137.88 li
540.936 133.704 mo
547.2 133.704 li
540.936 135.792 mo
547.2 135.792 li
550.656 131.976 mo
551.304 131.616 li
552.384 130.608 li
552.384 137.88 li
557.568 137.52 mo
557.208 137.88 li
556.848 137.52 li
557.208 137.16 li
557.568 137.52 li
557.568 138.168 li
557.208 138.888 li
556.848 139.248 li
560.304 132.336 mo
560.304 131.976 li
560.664 131.256 li
561.024 130.968 li
561.672 130.608 li
563.04 130.608 li
563.76 130.968 li
564.12 131.256 li
564.48 131.976 li
564.48 132.696 li
564.12 133.344 li
563.4 134.424 li
559.944 137.88 li
564.768 137.88 li
567.936 137.52 mo
567.576 137.88 li
567.216 137.52 li
567.576 137.16 li
567.936 137.52 li
567.936 138.168 li
567.576 138.888 li
567.216 139.248 li
571.032 130.608 mo
574.848 130.608 li
572.76 133.344 li
573.768 133.344 li
574.488 133.704 li
574.848 134.064 li
575.136 135.072 li
575.136 135.792 li
574.848 136.8 li
574.128 137.52 li
573.12 137.88 li
572.04 137.88 li
571.032 137.52 li
570.672 137.16 li
570.312 136.44 li
@
1.44 lw
481.392 147.672 mo
492.624 147.672 li
503.856 147.672 mo
515.088 147.672 li
@
1.08 lw
532.656 142.848 mo
532.656 150.12 li
532.656 142.848 mo
535.392 150.12 li
538.2 142.848 mo
535.392 150.12 li
538.2 142.848 mo
538.2 150.12 li
540.936 146.016 mo
547.2 146.016 li
540.936 148.032 mo
547.2 148.032 li
550.656 144.288 mo
551.304 143.928 li
552.384 142.848 li
552.384 150.12 li
557.568 149.76 mo
557.208 150.12 li
556.848 149.76 li
557.208 149.472 li
557.568 149.76 li
557.568 150.48 li
557.208 151.2 li
556.848 151.488 li
560.304 144.576 mo
560.304 144.288 li
560.664 143.568 li
561.024 143.208 li
561.672 142.848 li
563.04 142.848 li
563.76 143.208 li
564.12 143.568 li
564.48 144.288 li
564.48 144.936 li
564.12 145.656 li
563.4 146.664 li
559.944 150.12 li
564.768 150.12 li
@
.36 lw
481.392 159.984 mo
522.936 159.984 li
@
1.08 lw
532.656 155.16 mo
532.656 162.432 li
532.656 155.16 mo
535.392 162.432 li
538.2 155.16 mo
535.392 162.432 li
538.2 155.16 mo
538.2 162.432 li
540.936 158.256 mo
547.2 158.256 li
540.936 160.344 mo
547.2 160.344 li
550.656 156.528 mo
551.304 156.168 li
552.384 155.16 li
552.384 162.432 li
@
1.8 lw
207 169.272 mo
207.648 168.84 li
208.944 167.616 li
210.312 165.816 li
211.608 163.296 li
212.976 160.128 li
214.272 156.312 li
215.64 152.28 li
216.936 148.392 li
218.304 144.648 li
219.6 141.264 li
220.968 138.24 li
222.264 135.72 li
223.632 133.776 li
224.928 132.408 li
226.296 131.4 li
227.592 130.464 li
228.96 129.384 li
230.256 127.944 li
231.624 126.36 li
232.92 124.56 li
234.288 122.544 li
235.584 120.456 li
236.952 118.296 li
239.544 113.832 li
240.912 111.672 li
242.208 109.584 li
243.576 107.784 li
244.872 106.2 li
246.24 104.976 li
247.536 103.968 li
248.904 103.032 li
250.2 101.952 li
251.568 100.656 li
252.864 99.072 li
254.232 97.3441 li
255.528 95.688 li
256.896 93.96 li
258.192 92.304 li
259.56 90.7921 li
260.856 89.424 li
262.224 88.488 li
263.52 87.984 li
264.888 88.056 li
266.184 88.416 li
267.552 88.92 li
268.848 89.496 li
270.144 90 li
271.512 90.504 li
272.808 91.08 li
274.176 91.656 li
275.472 92.2321 li
276.84 92.736 li
278.136 93.312 li
279.504 93.888 li
280.8 94.608 li
282.168 95.328 li
283.464 96.1201 li
284.832 96.768 li
286.128 97.2 li
287.496 97.416 li
288.792 97.272 li
290.16 96.84 li
291.456 96.1201 li
292.824 95.112 li
294.12 93.96 li
295.488 92.736 li
296.784 91.512 li
298.152 90.433 li
299.448 89.569 li
300.744 88.921 li
302.112 88.561 li
303.408 88.561 li
304.775 88.993 li
306.071 89.713 li
307.439 90.8651 li
308.735 92.161 li
310.103 93.457 li
311.399 94.681 li
312.767 95.689 li
314.063 96.481 li
315.431 96.985 li
316.727 97.345 li
318.095 97.6331 li
319.391 97.849 li
320.759 98.065 li
322.055 98.353 li
323.423 98.6411 li
324.719 98.929 li
326.087 99.289 li
327.383 99.577 li
328.751 99.8651 li
330.047 100.081 li
331.343 100.369 li
332.711 100.657 li
334.007 100.873 li
335.375 101.161 li
336.671 101.449 li
338.039 101.665 li
339.335 101.809 li
340.703 101.953 li
341.999 102.025 li
344.663 102.025 li
346.031 101.953 li
347.327 101.881 li
348.695 101.809 li
351.359 101.809 li
352.655 101.881 li
354.023 102.025 li
355.319 102.097 li
356.687 102.241 li
357.983 102.313 li
359.351 102.385 li
360.647 102.457 li
363.311 102.457 li
364.607 102.529 li
365.975 102.673 li
367.271 103.033 li
368.639 103.537 li
369.935 104.329 li
371.303 105.409 li
372.599 106.777 li
373.967 108.289 li
375.263 110.017 li
376.631 111.817 li
377.927 113.545 li
379.295 115.273 li
380.591 116.929 li
@
380.591 116.929 mo
381.959 118.369 li
383.255 119.809 li
387.287 123.841 li
388.583 125.209 li
389.951 126.649 li
391.247 128.089 li
392.542 129.457 li
393.91 130.897 li
395.206 132.265 li
396.574 133.561 li
397.87 134.713 li
399.238 135.793 li
400.534 136.729 li
401.902 137.521 li
403.198 138.241 li
404.566 138.817 li
405.862 139.465 li
407.23 140.041 li
408.526 140.617 li
409.894 141.265 li
411.19 141.913 li
412.558 142.561 li
413.854 143.209 li
415.222 143.785 li
416.518 144.361 li
417.886 144.865 li
419.182 145.297 li
420.55 145.585 li
423.142 146.161 li
424.51 146.377 li
425.806 146.521 li
427.174 146.737 li
428.47 146.881 li
429.838 146.953 li
431.134 147.025 li
432.502 147.097 li
433.798 147.169 li
439.126 147.169 li
440.494 147.241 li
441.79 147.241 li
443.158 147.313 li
444.454 147.457 li
445.822 147.601 li
447.118 147.817 li
448.486 148.177 li
449.782 148.537 li
451.15 148.969 li
453.742 150.121 li
455.11 150.913 li
456.406 151.777 li
457.774 152.713 li
459.07 153.721 li
460.438 154.801 li
461.734 155.881 li
463.102 156.889 li
464.398 158.041 li
465.766 159.193 li
467.062 160.561 li
468.43 162.001 li
469.726 163.585 li
471.094 165.241 li
472.39 166.897 li
@
472.39 166.897 mo
473.758 168.409 li
473.76 168.408 mo
475.056 169.704 li
476.424 170.784 li
477.72 171.648 li
479.088 172.224 li
480.384 172.728 li
481.752 173.088 li
484.344 173.664 li
485.712 174.024 li
487.008 174.528 li
488.376 175.032 li
489.672 175.536 li
491.04 175.968 li
492.336 176.184 li
493.704 176.328 li
495 176.4 li
496.368 176.4 li
497.664 176.472 li
499.032 176.616 li
500.328 176.76 li
501.696 176.904 li
504.36 176.904 li
505.656 176.832 li
507.024 176.76 li
508.32 176.616 li
509.688 176.544 li
512.352 176.544 li
513.648 176.616 li
514.944 176.76 li
516.312 176.904 li
517.608 177.12 li
518.976 177.336 li
520.272 177.552 li
521.64 177.768 li
522.935 177.984 li
524.303 178.128 li
525.599 178.2 li
526.967 178.344 li
528.263 178.416 li
529.631 178.488 li
530.927 178.56 li
532.295 178.632 li
533.591 178.704 li
534.959 178.704 li
536.255 178.776 li
537.623 178.848 li
538.919 178.92 li
540.287 178.92 li
541.583 178.992 li
542.951 178.992 li
544.247 179.064 li
545.543 179.064 li
546.911 179.136 li
@
.36 lw
207 173.952 mo
208.944 173.304 li
210.312 172.872 li
211.608 172.296 li
212.976 171.576 li
214.272 170.712 li
215.64 169.992 li
216.936 169.416 li
218.304 169.128 li
219.6 169.128 li
220.968 169.56 li
222.264 170.352 li
223.632 171.504 li
224.928 172.8 li
226.296 174.24 li
227.592 175.752 li
230.256 178.416 li
231.624 179.568 li
231.696 179.64 li
244.368 179.64 mo
244.872 179.424 li
246.24 178.776 li
247.536 178.056 li
248.904 177.264 li
250.2 176.4 li
251.568 175.464 li
252.864 174.384 li
254.232 173.304 li
255.528 172.224 li
256.896 171.216 li
258.192 170.352 li
259.56 169.632 li
260.856 169.128 li
262.224 168.696 li
263.52 168.408 li
264.888 168.336 li
266.184 168.408 li
267.552 168.552 li
268.848 168.768 li
270.144 169.128 li
271.512 169.488 li
272.808 169.848 li
274.176 170.352 li
275.472 170.784 li
276.84 171.288 li
278.136 171.792 li
279.504 172.368 li
280.8 173.016 li
282.168 173.592 li
283.464 174.24 li
284.832 174.816 li
286.128 175.392 li
287.496 175.824 li
288.792 176.256 li
290.16 176.616 li
291.456 176.976 li
292.824 177.192 li
294.12 177.408 li
295.488 177.552 li
296.784 177.768 li
298.152 177.84 li
300.744 178.128 li
302.112 178.272 li
303.408 178.416 li
304.775 178.56 li
306.071 178.704 li
307.439 178.848 li
308.735 178.992 li
310.103 179.136 li
311.399 179.28 li
312.767 179.496 li
314.063 179.64 li
314.207 179.64 li
373.176 179.64 mo
373.968 179.424 li
375.264 179.064 li
376.632 178.848 li
377.928 178.632 li
379.296 178.488 li
380.592 178.488 li
381.96 178.416 li
383.256 178.488 li
384.624 178.56 li
385.92 178.632 li
387.288 178.704 li
388.584 178.848 li
389.952 178.92 li
392.544 179.064 li
395.208 179.064 li
396.576 179.136 li
403.2 179.136 li
404.568 179.064 li
405.864 179.064 li
407.232 178.992 li
408.528 178.92 li
409.896 178.848 li
411.192 178.776 li
412.56 178.704 li
413.855 178.56 li
415.223 178.488 li
416.519 178.416 li
417.887 178.272 li
419.183 178.2 li
420.551 178.128 li
421.847 177.984 li
423.143 177.912 li
424.511 177.768 li
425.807 177.696 li
427.175 177.552 li
428.471 177.48 li
429.839 177.408 li
431.135 177.264 li
432.503 177.192 li
433.799 177.192 li
435.167 177.12 li
445.823 177.12 li
447.119 177.192 li
448.487 177.192 li
449.783 177.264 li
451.151 177.336 li
453.743 177.624 li
455.111 177.84 li
456.407 178.056 li
457.775 178.344 li
459.071 178.56 li
460.439 178.776 li
461.735 178.992 li
463.103 179.208 li
@
463.103 179.208 mo
464.399 179.352 li
465.767 179.496 li
466.847 179.64 li
505.512 179.64 mo
505.656 179.64 li
507.024 179.568 li
508.32 179.496 li
509.688 179.424 li
510.984 179.424 li
512.352 179.352 li
513.648 179.28 li
514.944 179.28 li
516.312 179.208 li
517.608 179.208 li
518.976 179.136 li
520.272 179.136 li
521.64 179.208 li
522.936 179.208 li
524.304 179.28 li
525.6 179.28 li
526.968 179.352 li
528.264 179.352 li
529.632 179.424 li
530.928 179.424 li
532.296 179.496 li
533.592 179.496 li
534.96 179.568 li
536.256 179.568 li
537.624 179.64 li
537.768 179.64 li
@
1.44 lw
207 172.368 mo
207.648 172.224 li
208.944 171.864 li
210.312 171.288 li
211.608 170.352 li
212.976 168.984 li
214.272 167.4 li
215.568 165.672 li
223.848 159.552 mo
224.928 160.2 li
226.296 161.136 li
227.592 162.144 li
228.96 163.008 li
230.256 163.728 li
231.624 164.304 li
232.92 164.736 li
233.64 164.88 li
244.08 161.208 mo
244.872 160.92 li
246.24 160.56 li
247.536 159.984 li
248.904 159.192 li
250.2 158.112 li
251.568 156.744 li
252.864 155.16 li
253.08 154.944 li
259.992 146.088 mo
260.856 144.936 li
262.224 143.496 li
263.52 142.272 li
264.888 141.336 li
266.184 140.832 li
267.552 140.616 li
268.848 140.688 li
269.136 140.76 li
277.776 147.672 mo
278.136 148.104 li
279.504 149.544 li
280.8 151.128 li
282.168 152.712 li
283.464 154.296 li
284.832 155.952 li
285.048 156.24 li
292.68 164.448 mo
292.824 164.448 li
294.12 165.24 li
295.488 165.672 li
296.784 165.96 li
298.152 166.032 li
299.448 165.96 li
300.744 165.744 li
302.112 165.456 li
303.408 165.096 li
303.48 165.096 li
314.424 162.288 mo
315.432 162.072 li
316.728 161.856 li
318.096 161.568 li
319.392 161.352 li
320.76 161.208 li
322.056 161.064 li
323.424 160.992 li
324.72 160.92 li
325.512 160.992 li
336.456 163.368 mo
336.672 163.368 li
338.04 163.728 li
339.336 164.088 li
340.704 164.448 li
342 164.88 li
343.368 165.24 li
344.664 165.6 li
346.032 165.888 li
347.328 166.176 li
358.344 165.168 mo
359.352 164.736 li
360.648 164.16 li
361.944 163.512 li
363.312 162.864 li
364.608 162.288 li
365.976 161.712 li
367.272 161.28 li
368.64 160.848 li
368.712 160.848 li
379.8 160.92 mo
380.592 161.136 li
381.96 161.64 li
383.256 162.144 li
384.624 162.72 li
385.92 163.368 li
387.288 163.944 li
388.584 164.592 li
389.952 165.24 li
390.096 165.312 li
400.464 169.704 mo
400.536 169.704 li
401.904 170.208 li
403.2 170.64 li
404.568 171.072 li
405.864 171.432 li
407.232 171.792 li
408.528 172.08 li
409.896 172.368 li
411.192 172.584 li
411.264 172.584 li
422.496 172.8 mo
423.144 172.8 li
424.512 172.656 li
425.808 172.584 li
427.176 172.44 li
428.472 172.296 li
429.84 172.08 li
431.136 171.936 li
432.504 171.72 li
433.656 171.576 li
444.816 170.568 mo
445.824 170.568 li
447.12 170.64 li
448.488 170.784 li
449.784 171 li
451.152 171.288 li
452.448 171.648 li
453.744 172.08 li
455.112 172.656 li
455.688 172.872 li
466.272 176.616 mo
467.064 176.832 li
468.432 177.192 li
@
468.432 177.192 mo
469.728 177.552 li
471.096 177.984 li
472.392 178.416 li
473.76 178.848 li
475.056 179.208 li
476.424 179.496 li
476.856 179.64 li
510.552 179.64 mo
510.768 179.64 li
521.928 178.992 mo
522.936 179.064 li
524.304 179.064 li
525.6 179.136 li
526.968 179.136 li
528.264 179.208 li
529.632 179.208 li
530.928 179.28 li
532.296 179.28 li
533.16 179.352 li
544.392 179.568 mo
545.544 179.64 li
546.912 179.64 li
207 170.064 mo
207.648 169.704 li
208.944 168.696 li
210.312 167.256 li
211.608 165.384 li
212.76 163.368 li
215.64 157.248 mo
216.144 156.24 li
219.456 150.408 mo
219.6 150.192 li
220.968 148.392 li
222.264 147.024 li
223.632 146.088 li
224.928 145.584 li
226.296 145.296 li
226.44 145.296 li
233.064 143.928 mo
234.072 143.568 li
239.544 139.608 mo
239.544 139.608 li
240.912 138.096 li
242.208 136.512 li
243.576 135 li
244.872 133.56 li
245.52 132.984 li
250.344 128.232 mo
251.136 127.44 li
255.6 122.4 mo
258.192 119.52 li
259.56 118.152 li
260.856 116.784 li
261.792 115.92 li
267.912 113.4 mo
268.848 113.472 li
268.992 113.472 li
274.824 116.712 mo
275.472 117.216 li
276.84 118.296 li
278.136 119.376 li
279.504 120.456 li
280.8 121.536 li
281.808 122.328 li
287.424 126.072 mo
287.496 126.072 li
288.504 126.36 li
294.768 124.488 mo
295.488 124.056 li
296.784 123.12 li
298.152 122.184 li
299.448 121.32 li
300.744 120.528 li
302.112 119.88 li
302.4 119.808 li
309.024 119.16 mo
310.104 119.304 li
316.728 120.528 mo
318.096 120.888 li
319.392 121.248 li
320.76 121.752 li
322.056 122.256 li
323.424 122.976 li
324.72 123.768 li
325.008 123.984 li
330.192 128.232 mo
330.984 129.024 li
335.664 133.848 mo
336.672 134.856 li
338.04 136.08 li
339.336 137.232 li
340.704 138.24 li
342 139.176 li
342.648 139.536 li
348.912 141.84 mo
349.992 141.984 li
350.064 141.984 li
356.688 141.408 mo
357.984 140.904 li
359.352 140.256 li
360.648 139.464 li
361.944 138.528 li
363.312 137.664 li
364.464 136.944 li
370.656 134.424 mo
371.304 134.424 li
@
371.304 134.424 mo
371.736 134.424 li
378.216 136.08 mo
379.296 136.584 li
380.592 137.304 li
381.96 138.096 li
383.256 138.96 li
384.624 139.896 li
385.848 140.832 li
390.816 145.368 mo
391.608 146.16 li
396.792 150.48 mo
397.872 151.128 li
399.24 151.848 li
400.536 152.424 li
401.904 152.928 li
403.2 153.288 li
404.568 153.576 li
405.144 153.648 li
411.768 154.728 mo
412.56 154.872 li
412.848 154.944 li
419.544 155.736 mo
420.552 155.736 li
421.848 155.808 li
424.512 155.808 li
425.808 155.736 li
427.176 155.664 li
428.472 155.592 li
428.544 155.592 li
435.24 155.016 mo
436.392 155.016 li
443.088 155.664 mo
443.16 155.664 li
444.456 156.024 li
445.824 156.384 li
447.12 156.888 li
448.488 157.392 li
449.784 157.968 li
451.152 158.544 li
451.512 158.688 li
457.416 161.856 mo
457.776 162.072 li
458.352 162.504 li
463.824 166.464 mo
464.4 166.824 li
465.768 167.832 li
467.064 168.912 li
468.432 170.064 li
469.728 171.216 li
470.808 172.152 li
476.208 176.112 mo
476.424 176.184 li
477.216 176.544 li
483.768 177.984 mo
484.344 178.128 li
485.712 178.272 li
487.008 178.56 li
488.376 178.92 li
490.536 179.64 li
514.368 179.64 mo
514.944 179.568 li
516.312 179.352 li
516.384 179.352 li
523.08 179.064 mo
524.232 179.064 li
531 179.064 mo
539.928 179.064 li
546.696 179.208 mo
546.912 179.208 li
207 169.416 mo
207.648 169.056 li
207.936 168.84 li
211.896 163.512 mo
212.4 162.432 li
214.92 156.24 mo
215.28 155.16 li
217.8 148.896 mo
218.232 147.888 li
221.328 141.912 mo
221.976 140.976 li
227.664 137.664 mo
228.672 137.16 li
233.712 132.768 mo
234.288 132.12 li
234.432 131.904 li
238.68 126.648 mo
239.328 125.712 li
243.576 120.528 mo
244.368 119.664 li
249.48 115.344 mo
250.2 114.696 li
250.344 114.624 li
254.88 109.656 mo
255.528 108.936 li
255.672 108.792 li
260.064 103.752 mo
260.856 102.96 li
266.832 100.584 mo
267.552 100.656 li
267.912 100.8 li
273.744 104.112 mo
274.608 104.832 li
280.152 108.72 mo
280.8 109.224 li
281.016 109.368 li
286.776 112.896 mo
287.496 113.256 li
287.784 113.328 li
294.192 112.032 mo
295.128 111.456 li
300.888 107.928 mo
301.896 107.496 li
308.52 107.496 mo
308.736 107.568 li
309.528 107.928 li
315.792 110.304 mo
316.728 110.592 li
316.872 110.664 li
322.992 113.472 mo
323.424 113.76 li
323.928 114.12 li
329.544 117.864 mo
330.048 118.224 li
330.48 118.512 li
336.024 122.328 mo
336.672 122.76 li
336.96 122.904 li
@
343.008 125.856 mo
344.088 126.072 li
350.784 126.72 mo
351.36 126.792 li
351.864 126.72 li
358.488 125.424 mo
359.496 124.92 li
365.616 122.184 mo
365.976 122.112 li
366.768 121.968 li
373.176 123.336 mo
373.968 123.768 li
374.112 123.912 li
379.656 127.8 mo
380.52 128.448 li
385.848 132.624 mo
386.64 133.416 li
391.392 138.168 mo
392.184 139.032 li
397.224 143.424 mo
397.872 143.856 li
398.232 144 li
404.496 146.376 mo
404.568 146.448 li
405.576 146.664 li
412.128 148.32 mo
412.56 148.464 li
413.136 148.608 li
419.616 150.552 mo
420.552 150.768 li
420.696 150.84 li
427.32 151.992 mo
428.472 152.136 li
435.168 152.856 mo
436.248 153 li
442.944 153.792 mo
443.16 153.792 li
444.096 154.008 li
450.576 155.736 mo
451.152 155.952 li
451.584 156.168 li
457.704 159.048 mo
457.776 159.12 li
458.64 159.624 li
464.112 163.584 mo
464.4 163.8 li
464.976 164.304 li
469.944 168.768 mo
470.808 169.56 li
476.136 173.592 mo
476.424 173.736 li
477.216 174.096 li
483.768 175.392 mo
484.344 175.464 li
484.848 175.536 li
491.328 177.336 mo
492.336 177.552 li
492.48 177.552 li
499.104 178.56 mo
500.256 178.776 li
506.952 178.632 mo
507.024 178.632 li
508.032 178.488 li
514.8 177.984 mo
515.88 177.984 li
522.648 178.272 mo
522.936 178.272 li
523.728 178.344 li
530.496 178.632 mo
530.928 178.632 li
531.576 178.704 li
538.344 178.92 mo
539.424 178.92 li
546.192 179.136 mo
546.912 179.136 li
207 169.344 mo
207.648 168.912 li
208.944 167.76 li
210.312 166.032 li
211.608 163.656 li
212.256 162.216 li
214.632 155.952 mo
214.992 154.872 li
217.296 148.536 mo
217.656 147.528 li
220.392 141.336 mo
220.896 140.328 li
225.288 135.288 mo
226.296 134.784 li
227.592 134.064 li
228.96 133.128 li
230.256 131.904 li
231.624 130.392 li
232.128 129.744 li
236.088 124.2 mo
236.664 123.264 li
240.48 117.72 mo
240.912 117 li
241.056 116.784 li
245.376 111.6 mo
246.24 110.88 li
251.28 106.416 mo
251.568 106.128 li
252.864 104.544 li
254.232 102.816 li
255.528 101.088 li
256.896 99.432 li
261.72 94.752 mo
262.224 94.392 li
262.656 94.176 li
268.992 95.76 mo
269.928 96.336 li
275.544 100.08 mo
276.48 100.728 li
282.024 104.544 mo
282.168 104.616 li
283.464 105.624 li
284.832 106.632 li
286.128 107.568 li
287.496 108.288 li
288.792 108.72 li
289.728 108.864 li
295.92 106.632 mo
296.784 106.056 li
296.928 105.984 li
302.976 103.248 mo
303.408 103.176 li
304.128 103.176 li
@
310.392 105.408 mo
311.4 105.984 li
317.736 108.072 mo
318.096 108.144 li
319.392 108.504 li
320.76 108.864 li
322.056 109.296 li
323.424 109.8 li
324.72 110.448 li
326.088 111.096 li
326.16 111.168 li
332.208 114.048 mo
332.712 114.264 li
333.216 114.552 li
339.624 116.496 mo
340.704 116.568 li
@
340.704 116.568 mo
340.776 116.568 li
347.472 116.064 mo
348.624 115.92 li
355.32 115.272 mo
355.32 115.272 li
356.688 115.128 li
357.984 114.912 li
359.352 114.696 li
360.648 114.336 li
361.944 114.048 li
363.312 113.76 li
364.104 113.616 li
370.584 114.768 mo
371.304 115.2 li
371.52 115.416 li
376.416 120.024 mo
376.632 120.312 li
377.136 120.888 li
382.104 125.496 mo
382.968 126.216 li
388.08 130.536 mo
388.584 130.968 li
389.952 132.192 li
392.544 134.64 li
393.912 135.792 li
394.776 136.512 li
400.32 140.328 mo
400.536 140.4 li
401.328 140.76 li
407.664 143.208 mo
408.528 143.568 li
408.672 143.64 li
414.72 146.52 mo
415.224 146.736 li
415.8 147.024 li
422.064 149.4 mo
423.144 149.688 li
424.512 150.048 li
425.808 150.336 li
427.176 150.552 li
428.472 150.768 li
429.84 150.912 li
430.92 150.984 li
437.616 151.056 mo
438.768 151.056 li
445.464 151.416 mo
445.824 151.416 li
446.616 151.56 li
453.024 153.504 mo
454.032 154.008 li
459.576 157.752 mo
460.44 158.4 li
461.736 159.408 li
463.104 160.488 li
464.4 161.568 li
465.768 162.648 li
466.56 163.44 li
471.24 168.264 mo
472.032 169.128 li
477.288 173.232 mo
477.72 173.448 li
478.296 173.664 li
484.92 174.816 mo
485.712 174.96 li
486 175.032 li
492.48 176.832 mo
493.704 176.976 li
495 177.12 li
496.368 177.264 li
497.664 177.48 li
499.032 177.696 li
500.328 177.912 li
501.408 178.056 li
508.104 177.84 mo
508.32 177.84 li
509.256 177.768 li
515.952 177.696 mo
516.312 177.696 li
517.104 177.768 li
523.8 178.344 mo
524.304 178.416 li
524.88 178.416 li
531.648 178.632 mo
532.296 178.704 li
533.592 178.704 li
534.96 178.776 li
536.256 178.776 li
537.624 178.848 li
538.92 178.848 li
540.288 178.92 li
540.648 178.92 li
@
1.8 lw
207 277.92 mo
622.728 277.92 li
622.728 179.64 li
207 179.64 li
207 277.92 li
207 270.792 li
223.632 277.92 mo
223.632 274.32 li
240.264 277.92 mo
240.264 274.32 li
256.896 277.92 mo
256.896 274.32 li
273.528 277.92 mo
273.528 274.32 li
290.16 277.92 mo
290.16 270.792 li
306.792 277.92 mo
306.792 274.32 li
323.424 277.92 mo
323.424 274.32 li
340.056 277.92 mo
340.056 274.32 li
356.688 277.92 mo
356.688 274.32 li
373.32 277.92 mo
373.32 270.792 li
389.952 277.92 mo
389.952 274.32 li
406.512 277.92 mo
406.512 274.32 li
423.144 277.92 mo
423.144 274.32 li
439.776 277.92 mo
439.776 274.32 li
456.408 277.92 mo
456.408 270.792 li
473.04 277.92 mo
473.04 274.32 li
489.672 277.92 mo
489.672 274.32 li
506.304 277.92 mo
506.304 274.32 li
522.936 277.92 mo
522.936 274.32 li
539.568 277.92 mo
539.568 270.792 li
556.2 277.92 mo
556.2 274.32 li
572.832 277.92 mo
572.832 274.32 li
589.464 277.92 mo
589.464 274.32 li
606.096 277.92 mo
606.096 274.32 li
622.728 277.92 mo
622.728 270.792 li
207 186.768 mo
207 179.64 li
223.632 183.168 mo
223.632 179.64 li
240.264 183.168 mo
240.264 179.64 li
256.896 183.168 mo
256.896 179.64 li
273.528 183.168 mo
273.528 179.64 li
290.16 186.768 mo
290.16 179.64 li
306.792 183.168 mo
306.792 179.64 li
323.424 183.168 mo
323.424 179.64 li
340.056 183.168 mo
340.056 179.64 li
356.688 183.168 mo
356.688 179.64 li
373.32 186.768 mo
373.32 179.64 li
389.952 183.168 mo
389.952 179.64 li
406.512 183.168 mo
406.512 179.64 li
423.144 183.168 mo
423.144 179.64 li
439.776 183.168 mo
439.776 179.64 li
456.408 186.768 mo
456.408 179.64 li
473.04 183.168 mo
473.04 179.64 li
489.672 183.168 mo
489.672 179.64 li
506.304 183.168 mo
506.304 179.64 li
522.936 183.168 mo
522.936 179.64 li
539.568 186.768 mo
539.568 179.64 li
556.2 183.168 mo
556.2 179.64 li
572.832 183.168 mo
572.832 179.64 li
589.464 183.168 mo
589.464 179.64 li
606.096 183.168 mo
606.096 179.64 li
622.728 186.768 mo
622.728 179.64 li
207 277.92 mo
214.128 277.92 li
207 253.296 mo
210.528 253.296 li
207 228.744 mo
214.128 228.744 li
207 204.192 mo
210.528 204.192 li
207 179.64 mo
214.128 179.64 li
615.6 277.92 mo
622.728 277.92 li
619.2 253.296 mo
622.728 253.296 li
615.6 228.744 mo
622.728 228.744 li
619.2 204.192 mo
622.728 204.192 li
615.6 179.64 mo
622.728 179.64 li
@
189.432 278.424 mo
189.936 279.936 li
191.52 281.016 li
194.112 281.52 li
195.696 281.52 li
198.288 281.016 li
199.8 279.936 li
200.304 278.424 li
200.304 277.344 li
199.8 275.832 li
198.288 274.752 li
195.696 274.248 li
194.112 274.248 li
191.52 274.752 li
189.936 275.832 li
189.432 277.344 li
189.432 278.424 li
192.024 231.84 mo
191.52 231.84 li
190.512 231.336 li
189.936 230.832 li
189.432 229.824 li
189.432 227.736 li
189.936 226.656 li
190.512 226.152 li
191.52 225.648 li
192.528 225.648 li
193.608 226.152 li
195.12 227.232 li
200.304 232.416 li
200.304 225.144 li
218.376 195.408 mo
219.456 194.832 li
220.968 193.32 li
220.968 204.192 li
227.736 195.912 mo
227.736 195.408 li
228.24 194.328 li
228.744 193.824 li
229.824 193.32 li
231.912 193.32 li
232.92 193.824 li
233.424 194.328 li
233.928 195.408 li
233.928 196.416 li
233.424 197.424 li
232.416 199.008 li
227.232 204.192 li
234.504 204.192 li
240.192 193.32 mo
238.608 193.824 li
238.104 194.832 li
238.104 195.912 li
238.608 196.92 li
239.688 197.424 li
241.704 198 li
243.288 198.504 li
244.296 199.512 li
244.872 200.592 li
244.872 202.104 li
244.296 203.184 li
243.792 203.688 li
242.28 204.192 li
240.192 204.192 li
238.608 203.688 li
238.104 203.184 li
237.6 202.104 li
237.6 200.592 li
238.104 199.512 li
239.112 198.504 li
240.696 198 li
242.784 197.424 li
243.792 196.92 li
244.296 195.912 li
244.296 194.832 li
243.792 193.824 li
242.28 193.32 li
240.192 193.32 li
207 258.624 mo
207.648 258.336 li
208.944 257.616 li
210.312 256.824 li
211.608 255.816 li
212.976 254.592 li
214.272 253.008 li
215.64 250.848 li
216.936 247.896 li
218.304 244.008 li
219.6 239.4 li
220.968 234.576 li
222.264 229.824 li
223.632 225.576 li
224.928 222.048 li
226.296 219.528 li
227.592 218.088 li
228.96 217.296 li
230.256 216.648 li
231.624 215.784 li
232.92 214.56 li
234.288 213.48 li
235.584 212.904 li
236.952 212.832 li
238.248 213.408 li
239.544 214.488 li
240.912 215.64 li
242.208 216.648 li
243.576 217.08 li
244.872 216.864 li
246.24 216.144 li
247.536 214.992 li
248.904 213.696 li
250.2 212.544 li
251.568 211.608 li
252.864 210.888 li
254.232 210.456 li
255.528 210.024 li
256.896 209.592 li
258.192 209.088 li
259.56 208.656 li
260.856 208.44 li
262.224 208.44 li
263.52 208.8 li
264.888 209.376 li
266.184 210.312 li
267.552 211.464 li
268.848 212.832 li
270.144 214.128 li
271.512 215.28 li
@
271.512 215.28 mo
272.808 215.928 li
274.176 216.144 li
275.472 215.856 li
276.84 215.208 li
278.136 214.416 li
279.504 213.696 li
280.8 213.048 li
282.168 212.544 li
283.464 212.184 li
284.832 212.04 li
286.128 212.112 li
287.496 212.472 li
@
287.496 212.472 mo
288.792 212.976 li
290.16 213.768 li
291.456 214.776 li
292.824 215.784 li
294.12 216.792 li
295.488 217.584 li
296.784 218.088 li
298.152 218.16 li
299.448 217.8 li
300.744 217.08 li
302.112 215.856 li
303.408 214.344 li
304.775 212.544 li
306.071 210.6 li
307.439 208.44 li
308.735 206.136 li
310.103 203.904 li
311.399 201.6 li
312.767 199.44 li
314.063 197.424 li
315.431 195.552 li
316.727 193.824 li
318.095 192.168 li
319.391 190.584 li
320.759 189.144 li
322.055 187.704 li
323.423 186.48 li
324.719 185.256 li
326.087 184.248 li
327.383 183.456 li
328.751 182.952 li
330.047 182.808 li
331.343 183.096 li
332.711 183.816 li
334.007 184.968 li
335.375 186.408 li
336.671 188.208 li
338.039 190.224 li
339.335 192.384 li
340.703 194.544 li
341.999 196.704 li
343.367 198.864 li
344.663 200.952 li
346.031 203.04 li
347.327 205.2 li
348.695 207.432 li
349.991 209.736 li
351.359 211.896 li
352.655 214.056 li
354.023 215.928 li
355.319 217.728 li
356.687 219.384 li
357.983 220.896 li
359.351 222.408 li
360.647 223.848 li
361.943 225.216 li
363.311 226.44 li
364.607 227.52 li
365.975 228.384 li
367.271 229.248 li
368.639 229.824 li
369.935 230.328 li
371.303 230.472 li
372.599 230.472 li
373.967 230.256 li
375.263 229.896 li
376.631 229.536 li
377.927 229.32 li
379.295 229.32 li
380.591 229.536 li
381.959 230.112 li
383.255 230.832 li
384.623 231.84 li
385.919 232.992 li
387.287 234.36 li
388.583 235.8 li
389.951 237.24 li
391.247 238.464 li
392.542 239.544 li
393.91 240.264 li
395.206 240.768 li
396.574 240.984 li
397.87 241.056 li
399.238 240.84 li
400.534 240.48 li
401.902 240.048 li
403.198 239.4 li
404.566 238.752 li
405.862 238.104 li
407.23 237.384 li
408.526 236.88 li
409.894 236.376 li
411.19 236.088 li
412.558 235.872 li
413.854 235.8 li
416.518 235.8 li
417.886 235.872 li
419.182 235.944 li
420.55 236.016 li
421.846 236.016 li
423.142 236.16 li
424.51 236.232 li
425.806 236.376 li
427.174 236.592 li
428.47 236.808 li
429.838 237.096 li
431.134 237.312 li
432.502 237.528 li
433.798 237.744 li
435.166 237.816 li
436.462 237.888 li
437.83 237.96 li
439.126 238.032 li
440.494 238.176 li
441.79 238.32 li
443.158 238.536 li
444.454 238.824 li
445.822 239.112 li
447.118 239.4 li
448.486 239.76 li
449.782 240.048 li
451.15 240.264 li
453.742 240.552 li
455.11 240.552 li
456.406 240.408 li
457.774 240.192 li
459.07 239.832 li
@
459.07 239.832 mo
460.438 239.4 li
461.734 238.824 li
463.102 238.032 li
464.398 237.168 li
465.766 236.304 li
467.062 235.368 li
468.43 234.432 li
469.726 233.496 li
471.094 232.704 li
472.39 231.912 li
473.758 231.264 li
473.76 231.264 mo
475.056 230.76 li
476.424 230.4 li
477.72 230.184 li
479.088 230.112 li
480.384 230.184 li
481.752 230.472 li
483.048 230.904 li
484.344 231.48 li
485.712 232.2 li
487.008 232.992 li
488.376 233.64 li
489.672 234.288 li
491.04 234.792 li
492.336 235.224 li
493.704 235.728 li
495 236.232 li
496.368 236.808 li
497.664 237.528 li
499.032 238.392 li
500.328 239.4 li
501.696 240.624 li
502.992 242.064 li
504.36 243.72 li
505.656 245.592 li
507.024 247.608 li
508.32 249.624 li
509.688 251.64 li
510.984 253.584 li
512.352 255.384 li
513.648 256.968 li
514.944 258.408 li
516.312 259.704 li
517.608 260.712 li
518.976 261.648 li
520.272 262.44 li
521.64 263.088 li
522.935 263.664 li
524.303 264.168 li
525.599 264.6 li
526.967 265.104 li
528.263 265.536 li
529.631 265.896 li
530.927 266.328 li
532.295 266.832 li
533.591 267.264 li
534.959 267.768 li
536.255 268.344 li
537.623 268.848 li
538.919 269.424 li
540.287 269.928 li
541.583 270.504 li
542.951 271.008 li
545.543 272.016 li
546.911 272.448 li
@
.36 lw
207 265.824 mo
207.648 265.392 li
208.944 264.384 li
210.312 263.448 li
211.608 262.44 li
212.976 261.576 li
214.272 260.784 li
215.64 260.064 li
216.936 259.488 li
218.304 259.056 li
219.6 259.056 li
220.968 259.56 li
222.264 260.568 li
223.632 262.08 li
224.928 264.168 li
226.296 266.76 li
227.592 269.568 li
228.96 272.376 li
230.256 274.68 li
231.624 276.48 li
232.92 277.488 li
234.216 277.92 li
234.288 277.92 mo
235.584 277.776 li
236.952 277.2 li
238.248 276.408 li
239.544 275.544 li
240.912 274.68 li
242.208 273.96 li
243.576 273.456 li
244.872 273.096 li
246.24 272.88 li
247.536 272.736 li
248.904 272.736 li
250.2 272.88 li
251.568 273.096 li
252.864 273.312 li
254.232 273.672 li
255.528 274.032 li
256.896 274.32 li
258.192 274.608 li
259.56 274.896 li
260.856 275.184 li
262.224 275.472 li
263.52 275.832 li
264.888 276.192 li
266.184 276.552 li
267.552 276.912 li
268.848 277.2 li
270.144 277.56 li
271.512 277.848 li
271.8 277.92 li
286.992 277.92 mo
287.496 277.848 li
288.792 277.632 li
290.16 277.416 li
291.456 277.272 li
292.824 277.2 li
294.12 277.128 li
295.488 277.128 li
296.784 277.2 li
298.152 277.272 li
299.448 277.416 li
300.744 277.632 li
302.112 277.848 li
302.472 277.92 li
483.48 277.92 mo
484.344 277.848 li
485.712 277.776 li
487.008 277.704 li
495 277.704 li
496.368 277.776 li
497.664 277.776 li
499.032 277.848 li
500.328 277.848 li
500.904 277.92 li
520.272 277.92 mo
520.272 277.92 li
521.64 277.848 li
522.936 277.848 li
524.304 277.776 li
526.968 277.776 li
528.264 277.704 li
532.296 277.704 li
533.592 277.776 li
541.584 277.776 li
542.952 277.848 li
546.912 277.848 li
@
1.44 lw
207 258.84 mo
207.648 258.336 li
208.944 257.616 li
210.312 257.112 li
211.608 256.896 li
212.976 256.824 li
214.272 256.968 li
215.64 257.112 li
216.936 257.256 li
217.728 257.256 li
226.656 262.944 mo
227.592 264.672 li
228.96 267.048 li
230.256 269.136 li
231.624 270.504 li
232.92 271.152 li
233.568 271.152 li
243.432 265.968 mo
243.576 265.896 li
244.872 265.032 li
246.24 264.096 li
247.536 263.088 li
248.904 262.08 li
250.2 261.144 li
251.568 260.208 li
252.648 259.56 li
263.232 257.184 mo
263.52 257.328 li
264.888 257.904 li
266.184 258.624 li
267.552 259.416 li
268.848 260.208 li
270.144 260.928 li
271.512 261.504 li
272.808 261.936 li
273.312 262.008 li
284.4 263.448 mo
286.128 264.024 li
287.496 264.456 li
288.792 264.888 li
290.16 265.392 li
291.456 265.896 li
292.824 266.472 li
294.84 267.48 li
305.568 269.424 mo
306.072 269.28 li
307.44 268.848 li
308.736 268.272 li
310.104 267.624 li
311.4 266.904 li
312.768 266.112 li
314.064 265.32 li
315.432 264.6 li
315.576 264.456 li
326.232 263.592 mo
327.384 264.168 li
328.752 264.96 li
330.048 265.824 li
331.344 266.904 li
332.712 267.984 li
334.008 269.208 li
335.232 270.288 li
343.728 277.56 mo
344.232 277.92 li
361.728 277.92 mo
361.944 277.776 li
363.312 276.84 li
364.608 275.904 li
365.976 274.968 li
367.272 273.96 li
368.64 272.952 li
369.936 272.016 li
370.368 271.728 li
380.736 268.056 mo
381.96 268.2 li
383.256 268.488 li
384.624 268.776 li
385.92 269.136 li
387.288 269.496 li
388.584 269.856 li
389.952 270.072 li
391.68 270.36 li
402.912 270.288 mo
403.2 270.216 li
407.232 270.216 li
408.528 270.288 li
409.896 270.432 li
411.192 270.576 li
412.56 270.72 li
413.856 270.936 li
414.072 271.008 li
425.088 273.24 mo
425.808 273.312 li
427.176 273.456 li
428.472 273.6 li
429.84 273.672 li
431.136 273.816 li
432.504 273.888 li
433.8 273.96 li
435.168 274.032 li
436.248 274.032 li
447.48 274.176 mo
449.784 274.176 li
451.152 274.248 li
452.448 274.32 li
453.744 274.32 li
455.112 274.392 li
458.712 274.392 li
469.944 274.608 mo
471.096 274.752 li
472.392 274.896 li
473.76 274.968 li
475.056 275.112 li
476.424 275.184 li
477.72 275.184 li
479.088 275.256 li
481.176 275.256 li
492.408 275.184 mo
493.704 275.112 li
495 275.112 li
496.368 275.04 li
497.664 275.112 li
499.032 275.112 li
500.328 275.256 li
501.696 275.328 li
502.992 275.544 li
503.568 275.616 li
514.728 276.984 mo
514.944 276.984 li
@
514.944 276.984 mo
516.312 277.056 li
518.976 277.056 li
520.272 276.984 li
525.96 276.984 li
537.192 277.056 mo
537.624 277.056 li
538.92 277.128 li
540.288 277.2 li
541.584 277.272 li
542.952 277.344 li
545.544 277.488 li
546.912 277.488 li
207 259.272 mo
207.648 258.984 li
208.944 258.48 li
210.312 258.048 li
211.608 257.616 li
212.976 257.112 li
214.272 256.392 li
215.208 255.672 li
219.096 250.272 mo
219.6 249.264 li
222.696 243.288 mo
223.632 241.848 li
224.928 240.408 li
226.296 239.76 li
227.592 239.904 li
228.96 240.696 li
229.752 241.2 li
236.088 242.712 mo
236.952 242.64 li
237.24 242.64 li
243.792 242.928 mo
244.872 242.136 li
246.24 240.696 li
247.536 238.896 li
248.904 237.168 li
249.696 236.16 li
255.24 232.848 mo
255.528 232.848 li
256.32 232.992 li
262.512 235.584 mo
263.52 236.376 li
264.888 237.528 li
266.184 238.752 li
267.552 239.976 li
268.848 241.2 li
269.28 241.488 li
275.472 243.216 mo
276.624 243 li
283.248 242.712 mo
283.464 242.784 li
284.832 243.216 li
286.128 243.864 li
287.496 244.584 li
288.792 245.304 li
290.16 246.168 li
291.168 246.888 li
296.496 250.992 mo
296.784 251.136 li
297.432 251.568 li
303.84 253.44 mo
304.776 253.368 li
306.072 253.08 li
307.44 252.648 li
308.736 252.144 li
310.104 251.496 li
311.4 250.776 li
312.12 250.344 li
318.168 247.392 mo
319.248 247.032 li
325.872 247.248 mo
326.088 247.32 li
327.384 247.824 li
328.752 248.328 li
330.048 249.048 li
331.344 249.84 li
332.712 250.704 li
333.792 251.496 li
339.336 255.312 mo
339.336 255.312 li
340.272 255.888 li
346.464 258.552 mo
347.328 258.984 li
348.696 259.704 li
349.992 260.424 li
351.36 261.144 li
352.656 261.792 li
@
352.656 261.792 mo
354.024 262.296 li
354.528 262.512 li
361.152 263.376 mo
361.944 263.304 li
362.304 263.304 li
368.856 261.792 mo
369.936 261.432 li
371.304 260.928 li
372.6 260.496 li
373.968 260.064 li
375.264 259.776 li
376.632 259.632 li
377.496 259.632 li
383.904 261.504 mo
384.624 261.792 li
384.912 261.936 li
391.248 264.24 mo
392.544 264.456 li
393.912 264.528 li
396.576 264.528 li
397.872 264.384 li
399.24 264.24 li
400.176 264.168 li
406.944 263.592 mo
407.232 263.592 li
408.024 263.52 li
414.792 263.736 mo
415.224 263.808 li
416.52 263.952 li
417.888 264.096 li
419.184 264.312 li
420.552 264.528 li
421.848 264.672 li
423.144 264.888 li
423.648 264.96 li
430.344 265.896 mo
431.136 265.968 li
431.496 265.968 li
438.192 266.4 mo
439.128 266.472 li
441.792 266.472 li
443.16 266.4 li
444.456 266.328 li
445.824 266.256 li
447.12 266.184 li
447.192 266.184 li
453.888 265.536 mo
454.968 265.392 li
461.664 264.744 mo
461.736 264.744 li
463.104 264.528 li
464.4 264.24 li
465.768 263.952 li
467.064 263.592 li
468.432 263.232 li
469.728 262.872 li
470.448 262.728 li
477 261.072 mo
478.08 260.856 li
484.776 260.64 mo
485.712 260.712 li
487.008 260.928 li
488.376 261.144 li
489.672 261.432 li
491.04 261.648 li
492.336 261.936 li
493.632 262.152 li
500.184 263.664 mo
500.328 263.736 li
501.264 264.024 li
507.384 266.904 mo
508.32 267.408 li
509.688 267.984 li
510.984 268.56 li
512.352 269.136 li
513.648 269.568 li
514.944 269.928 li
515.736 270.144 li
522.36 271.08 mo
523.512 271.224 li
530.208 271.872 mo
530.928 271.944 li
532.296 272.16 li
533.592 272.376 li
534.96 272.592 li
536.256 272.808 li
537.624 273.024 li
538.92 273.312 li
539.064 273.312 li
545.688 274.392 mo
546.84 274.536 li
207 258.696 mo
207.648 258.48 li
208.008 258.336 li
213.984 255.24 mo
214.776 254.448 li
218.232 248.688 mo
218.592 247.608 li
220.968 241.272 mo
220.968 241.272 li
221.328 240.264 li
223.704 233.928 mo
224.136 232.92 li
228.456 228.024 mo
228.96 227.808 li
229.536 227.664 li
235.512 224.712 mo
235.584 224.64 li
236.592 224.712 li
241.848 228.744 mo
242.208 229.032 li
242.784 229.32 li
248.616 227.16 mo
248.904 226.944 li
249.48 226.44 li
255.6 224.208 mo
256.752 224.352 li
263.232 226.08 mo
263.52 226.296 li
264.168 226.656 li
269.712 230.472 mo
270.144 230.832 li
270.72 231.048 li
277.128 230.976 mo
278.136 230.544 li
284.688 229.752 mo
284.832 229.752 li
@
284.832 229.752 mo
285.768 230.04 li
291.672 233.28 mo
292.608 233.928 li
298.656 236.592 mo
299.736 236.592 li
305.712 233.568 mo
306.072 233.208 li
306.576 232.848 li
311.112 227.88 mo
311.4 227.52 li
311.832 227.016 li
316.512 222.192 mo
316.728 221.976 li
317.376 221.472 li
323.208 218.16 mo
323.424 218.088 li
324.288 217.944 li
330.768 219.024 mo
331.344 219.384 li
331.704 219.6 li
336.456 224.352 mo
336.672 224.64 li
337.248 225.216 li
341.712 230.256 mo
342.504 231.048 li
346.968 236.088 mo
347.328 236.592 li
347.616 236.952 li
351.576 242.424 mo
352.224 243.36 li
356.472 248.616 mo
356.688 248.832 li
357.192 249.408 li
362.016 254.16 mo
362.952 254.808 li
369.144 257.112 mo
369.936 257.112 li
370.224 257.04 li
376.344 254.16 mo
377.352 253.656 li
383.904 253.152 mo
384.624 253.296 li
384.984 253.44 li
391.392 255.456 mo
392.472 255.6 li
399.168 254.88 mo
399.24 254.88 li
400.248 254.592 li
406.8 253.08 mo
407.232 253.008 li
407.952 252.936 li
414.648 253.008 mo
415.224 253.008 li
415.8 253.08 li
422.496 253.44 mo
423.144 253.512 li
423.648 253.512 li
430.344 253.944 mo
431.136 254.016 li
431.424 254.016 li
438.192 254.52 mo
439.128 254.592 li
439.272 254.592 li
445.896 255.816 mo
447.048 256.032 li
453.528 257.832 mo
454.608 258.192 li
460.944 260.28 mo
461.736 260.568 li
462.096 260.568 li
468.72 261.216 mo
469.728 261.144 li
469.872 261.144 li
476.496 259.848 mo
477.576 259.632 li
484.272 258.984 mo
484.344 258.984 li
485.352 259.128 li
492.048 260.064 mo
492.336 260.064 li
493.2 260.136 li
499.824 261.288 mo
500.328 261.432 li
500.904 261.648 li
506.808 264.744 mo
507.024 264.888 li
507.816 265.32 li
513.864 268.272 mo
514.872 268.704 li
521.496 269.928 mo
521.64 270 li
522.576 270.072 li
529.344 270.72 mo
529.632 270.72 li
530.424 270.792 li
537.12 271.872 mo
537.624 271.944 li
538.2 272.088 li
544.752 273.528 mo
545.544 273.744 li
545.832 273.816 li
207 258.912 mo
207.648 258.696 li
208.944 258.12 li
210.312 257.4 li
211.608 256.536 li
212.976 255.456 li
214.272 254.088 li
214.344 254.016 li
217.44 248.04 mo
217.872 246.96 li
219.96 240.552 mo
220.248 239.472 li
222.192 233.064 mo
222.552 231.984 li
225.072 225.792 mo
226.296 224.064 li
227.592 223.128 li
228.96 222.84 li
230.256 222.624 li
231.624 222.12 li
232.56 221.472 li
238.608 220.968 mo
239.472 221.688 li
245.232 223.632 mo
246.168 222.912 li
250.92 218.16 mo
251.568 217.656 li
@
251.568 217.656 mo
251.784 217.512 li
258.048 215.136 mo
258.192 215.136 li
259.56 214.848 li
260.856 214.776 li
262.224 214.92 li
263.52 215.424 li
264.888 216.216 li
266.184 217.296 li
266.328 217.368 li
271.224 221.976 mo
271.512 222.192 li
@
271.512 222.192 mo
272.16 222.552 li
278.64 221.976 mo
279.504 221.688 li
279.648 221.616 li
286.272 221.976 mo
287.208 222.48 li
292.32 226.8 mo
294.12 228.6 li
295.488 229.68 li
296.784 230.544 li
298.152 230.976 li
299.448 231.12 li
299.88 231.048 li
305.424 227.448 mo
306.072 226.728 li
306.216 226.584 li
310.176 221.184 mo
310.752 220.248 li
314.568 214.632 mo
315.216 213.768 li
319.68 208.728 mo
320.76 207.792 li
322.056 206.64 li
323.424 205.704 li
324.72 204.912 li
326.088 204.264 li
327.168 203.904 li
333.432 205.416 mo
334.008 205.848 li
334.368 206.136 li
338.976 210.96 mo
339.696 211.824 li
344.088 216.936 mo
344.664 217.728 li
344.736 217.872 li
348.552 223.416 mo
348.696 223.632 li
349.992 225.936 li
351.36 228.312 li
352.656 230.616 li
353.016 231.192 li
356.688 236.88 mo
357.408 237.744 li
361.656 242.928 mo
361.944 243.36 li
362.448 243.792 li
367.776 247.824 mo
368.784 248.328 li
375.336 248.112 mo
376.632 247.752 li
377.928 247.608 li
379.296 247.608 li
380.592 247.824 li
381.96 248.184 li
383.256 248.688 li
384.048 249.048 li
390.312 251.568 mo
391.248 251.856 li
391.392 251.856 li
398.016 251.496 mo
399.096 251.136 li
405.216 248.4 mo
405.864 248.112 li
406.296 247.896 li
412.704 245.88 mo
413.856 245.736 li
415.224 245.52 li
416.52 245.376 li
417.888 245.304 li
419.184 245.16 li
420.552 245.088 li
421.632 245.016 li
428.328 245.16 mo
428.472 245.16 li
429.48 245.304 li
436.104 246.312 mo
436.464 246.384 li
437.256 246.456 li
443.736 248.184 mo
444.456 248.4 li
444.816 248.544 li
451.224 250.704 mo
452.448 250.992 li
453.744 251.352 li
455.112 251.568 li
456.408 251.784 li
457.776 252.072 li
459.072 252.288 li
460.008 252.36 li
466.632 251.568 mo
467.064 251.424 li
467.64 251.136 li
473.4 247.608 mo
473.76 247.32 li
474.336 246.96 li
480.672 244.944 mo
481.752 245.016 li
488.088 247.248 mo
488.376 247.32 li
489.672 247.824 li
491.04 248.256 li
492.336 248.688 li
493.704 249.12 li
495 249.624 li
496.368 250.128 li
496.584 250.272 li
502.272 253.872 mo
502.992 254.52 li
503.064 254.592 li
507.888 259.344 mo
508.68 260.136 li
513.72 264.6 mo
514.656 265.176 li
520.92 267.696 mo
521.64 267.912 li
522.936 268.128 li
524.304 268.344 li
525.6 268.56 li
526.968 268.776 li
528.264 268.92 li
529.632 269.136 li
529.776 269.136 li
536.328 270.504 mo
537.408 270.792 li
543.96 272.52 mo
544.248 272.592 li
545.04 272.808 li
@
1.8 lw
207 376.128 mo
622.728 376.128 li
622.728 277.92 li
207 277.92 li
207 376.128 li
207 369 li
223.632 376.128 mo
223.632 372.6 li
240.264 376.128 mo
240.264 372.6 li
256.896 376.128 mo
256.896 372.6 li
273.528 376.128 mo
273.528 372.6 li
290.16 376.128 mo
290.16 369 li
306.792 376.128 mo
306.792 372.6 li
323.424 376.128 mo
323.424 372.6 li
340.056 376.128 mo
340.056 372.6 li
356.688 376.128 mo
356.688 372.6 li
373.32 376.128 mo
373.32 369 li
389.952 376.128 mo
389.952 372.6 li
406.512 376.128 mo
406.512 372.6 li
423.144 376.128 mo
423.144 372.6 li
439.776 376.128 mo
439.776 372.6 li
456.408 376.128 mo
456.408 369 li
473.04 376.128 mo
473.04 372.6 li
489.672 376.128 mo
489.672 372.6 li
506.304 376.128 mo
506.304 372.6 li
522.936 376.128 mo
522.936 372.6 li
539.568 376.128 mo
539.568 369 li
556.2 376.128 mo
556.2 372.6 li
572.832 376.128 mo
572.832 372.6 li
589.464 376.128 mo
589.464 372.6 li
606.096 376.128 mo
606.096 372.6 li
622.728 376.128 mo
622.728 369 li
207 285.048 mo
207 277.92 li
223.632 281.448 mo
223.632 277.92 li
240.264 281.448 mo
240.264 277.92 li
256.896 281.448 mo
256.896 277.92 li
273.528 281.448 mo
273.528 277.92 li
290.16 285.048 mo
290.16 277.92 li
306.792 281.448 mo
306.792 277.92 li
323.424 281.448 mo
323.424 277.92 li
340.056 281.448 mo
340.056 277.92 li
356.688 281.448 mo
356.688 277.92 li
373.32 285.048 mo
373.32 277.92 li
389.952 281.448 mo
389.952 277.92 li
406.512 281.448 mo
406.512 277.92 li
423.144 281.448 mo
423.144 277.92 li
439.776 281.448 mo
439.776 277.92 li
456.408 285.048 mo
456.408 277.92 li
473.04 281.448 mo
473.04 277.92 li
489.672 281.448 mo
489.672 277.92 li
506.304 281.448 mo
506.304 277.92 li
522.936 281.448 mo
522.936 277.92 li
539.568 285.048 mo
539.568 277.92 li
556.2 281.448 mo
556.2 277.92 li
572.832 281.448 mo
572.832 277.92 li
589.464 281.448 mo
589.464 277.92 li
606.096 281.448 mo
606.096 277.92 li
622.728 285.048 mo
622.728 277.92 li
207 376.128 mo
214.128 376.128 li
207 351.576 mo
210.528 351.576 li
207 327.024 mo
214.128 327.024 li
207 302.472 mo
210.528 302.472 li
207 277.92 mo
214.128 277.92 li
615.6 376.128 mo
622.728 376.128 li
619.2 351.576 mo
622.728 351.576 li
615.6 327.024 mo
622.728 327.024 li
619.2 302.472 mo
622.728 302.472 li
615.6 277.92 mo
622.728 277.92 li
@
189.432 376.704 mo
189.936 378.216 li
191.52 379.296 li
194.112 379.8 li
195.696 379.8 li
198.288 379.296 li
199.8 378.216 li
200.304 376.704 li
200.304 375.624 li
199.8 374.112 li
198.288 373.032 li
195.696 372.528 li
194.112 372.528 li
191.52 373.032 li
189.936 374.112 li
189.432 375.624 li
189.432 376.704 li
192.024 330.12 mo
191.52 330.12 li
190.512 329.616 li
189.936 329.112 li
189.432 328.032 li
189.432 326.016 li
189.936 324.936 li
190.512 324.432 li
191.52 323.928 li
192.528 323.928 li
193.608 324.432 li
195.12 325.44 li
200.304 330.624 li
200.304 323.424 li
217.368 294.192 mo
217.368 293.616 li
217.872 292.608 li
218.376 292.104 li
219.456 291.6 li
221.544 291.6 li
222.552 292.104 li
223.056 292.608 li
223.56 293.616 li
223.56 294.696 li
223.056 295.704 li
222.048 297.288 li
216.864 302.472 li
224.136 302.472 li
233.424 291.6 mo
228.24 291.6 li
227.736 296.208 li
228.24 295.704 li
229.824 295.2 li
231.336 295.2 li
232.92 295.704 li
233.928 296.784 li
234.504 298.296 li
234.504 299.376 li
233.928 300.888 li
232.92 301.968 li
231.336 302.472 li
229.824 302.472 li
228.24 301.968 li
227.736 301.392 li
227.232 300.384 li
244.296 293.112 mo
243.792 292.104 li
242.28 291.6 li
241.2 291.6 li
239.688 292.104 li
238.608 293.616 li
238.104 296.208 li
238.104 298.8 li
238.608 300.888 li
239.688 301.968 li
241.2 302.472 li
241.704 302.472 li
243.288 301.968 li
244.296 300.888 li
244.872 299.376 li
244.872 298.8 li
244.296 297.288 li
243.288 296.208 li
241.704 295.704 li
241.2 295.704 li
239.688 296.208 li
238.608 297.288 li
238.104 298.8 li
207 356.112 mo
208.944 356.112 li
210.312 356.04 li
211.608 355.896 li
212.976 355.536 li
214.272 354.888 li
215.64 353.952 li
216.936 352.512 li
218.304 350.712 li
219.6 348.408 li
220.968 345.816 li
222.264 342.936 li
223.632 340.056 li
224.928 337.176 li
226.296 334.584 li
227.592 332.496 li
228.96 330.84 li
230.256 329.616 li
231.624 328.752 li
232.92 328.104 li
234.288 327.528 li
235.584 327.096 li
236.952 326.592 li
238.248 326.088 li
239.544 325.512 li
240.912 324.792 li
242.208 324 li
243.576 323.28 li
244.872 322.632 li
246.24 322.056 li
247.536 321.552 li
248.904 321.192 li
250.2 320.904 li
251.568 320.832 li
252.864 320.904 li
254.232 321.12 li
255.528 321.48 li
256.896 321.768 li
258.192 321.984 li
259.56 322.272 li
260.856 322.416 li
262.224 322.56 li
263.52 322.56 li
@
263.52 322.56 mo
267.552 322.56 li
268.848 322.704 li
270.144 323.064 li
271.512 323.496 li
272.808 324.072 li
274.176 324.648 li
275.472 325.296 li
276.84 325.872 li
278.136 326.376 li
@
278.136 326.376 mo
279.504 326.88 li
280.8 327.24 li
282.168 327.672 li
283.464 328.032 li
284.832 328.392 li
286.128 328.68 li
287.496 328.968 li
288.792 329.256 li
290.16 329.544 li
291.456 329.832 li
292.824 330.048 li
294.12 330.192 li
296.784 330.192 li
298.152 330.048 li
299.448 329.904 li
300.744 329.688 li
302.112 329.544 li
303.408 329.4 li
304.775 329.184 li
306.071 329.04 li
307.439 328.896 li
308.735 328.68 li
310.103 328.464 li
311.399 328.176 li
312.767 327.889 li
314.063 327.529 li
315.431 327.097 li
316.727 326.737 li
318.095 326.233 li
319.391 325.801 li
320.759 325.369 li
322.055 324.937 li
323.423 324.505 li
324.719 324.001 li
326.087 323.497 li
327.383 322.993 li
328.751 322.489 li
330.047 322.057 li
331.343 321.697 li
332.711 321.481 li
334.007 321.337 li
336.671 321.337 li
338.039 321.409 li
339.335 321.481 li
340.703 321.625 li
341.999 321.697 li
343.367 321.769 li
344.663 321.841 li
346.031 321.913 li
347.327 322.057 li
348.695 322.201 li
349.991 322.345 li
351.359 322.489 li
352.655 322.633 li
354.023 322.849 li
355.319 322.993 li
356.687 323.209 li
357.983 323.569 li
359.351 323.929 li
360.647 324.433 li
361.943 325.009 li
363.311 325.657 li
364.607 326.305 li
365.975 327.097 li
367.271 327.889 li
368.639 328.681 li
369.935 329.401 li
371.303 330.121 li
372.599 330.841 li
373.967 331.417 li
375.263 331.993 li
376.631 332.497 li
377.927 332.929 li
379.295 333.361 li
380.591 333.793 li
381.959 334.153 li
383.255 334.513 li
384.623 334.873 li
385.919 335.233 li
387.287 335.593 li
388.583 335.953 li
389.951 336.385 li
392.542 337.393 li
393.91 337.969 li
395.206 338.545 li
396.574 339.265 li
397.87 339.985 li
399.238 340.777 li
400.534 341.569 li
401.902 342.361 li
403.198 343.153 li
404.566 343.945 li
405.862 344.737 li
407.23 345.457 li
408.526 346.177 li
409.894 346.897 li
411.19 347.617 li
412.558 348.265 li
413.854 348.913 li
415.222 349.489 li
416.518 349.993 li
417.886 350.497 li
419.182 351.001 li
420.55 351.505 li
423.142 352.369 li
424.51 352.729 li
425.806 353.017 li
427.174 353.305 li
428.47 353.521 li
429.838 353.665 li
431.134 353.809 li
432.502 353.881 li
433.798 353.953 li
435.166 354.025 li
436.462 354.025 li
437.83 353.953 li
439.126 353.953 li
440.494 353.881 li
441.79 353.809 li
443.158 353.809 li
444.454 353.737 li
445.822 353.593 li
447.118 353.521 li
448.486 353.377 li
449.782 353.161 li
451.15 353.017 li
452.446 352.801 li
@
452.446 352.801 mo
453.742 352.585 li
455.11 352.369 li
456.406 352.153 li
457.774 351.937 li
459.07 351.721 li
460.438 351.577 li
461.734 351.361 li
463.102 351.217 li
464.398 351.073 li
465.766 350.929 li
467.062 350.857 li
468.43 350.785 li
471.094 350.785 li
472.39 350.857 li
473.758 350.929 li
473.76 350.928 mo
475.056 351.072 li
476.424 351.288 li
477.72 351.576 li
479.088 351.936 li
480.384 352.296 li
481.752 352.656 li
484.344 353.52 li
485.712 353.952 li
487.008 354.312 li
488.376 354.744 li
489.672 355.176 li
491.04 355.536 li
492.336 355.896 li
493.704 356.256 li
495 356.544 li
496.368 356.76 li
497.664 356.976 li
499.032 357.192 li
500.328 357.408 li
501.696 357.552 li
502.992 357.768 li
504.36 357.912 li
505.656 358.128 li
507.024 358.272 li
508.32 358.488 li
509.688 358.704 li
510.984 358.92 li
512.352 359.208 li
513.648 359.424 li
514.944 359.712 li
516.312 360.072 li
517.608 360.36 li
518.976 360.72 li
520.272 361.08 li
521.64 361.44 li
522.935 361.872 li
524.303 362.304 li
525.599 362.664 li
526.967 363.096 li
528.263 363.6 li
529.631 364.032 li
530.927 364.536 li
532.295 364.968 li
533.591 365.472 li
534.959 365.904 li
536.255 366.408 li
537.623 366.84 li
538.919 367.272 li
540.287 367.704 li
541.583 368.136 li
542.951 368.496 li
544.247 368.856 li
@
544.247 368.856 mo
545.543 369.216 li
546.911 369.576 li
@
.36 lw
207 366.048 mo
208.944 365.4 li
210.312 364.968 li
211.608 364.608 li
212.976 364.32 li
214.272 363.96 li
215.64 363.6 li
216.936 363.24 li
218.304 362.952 li
219.6 362.808 li
220.968 362.88 li
222.264 363.24 li
223.632 363.888 li
224.928 364.968 li
226.296 366.336 li
227.592 367.992 li
228.96 369.792 li
230.256 371.664 li
231.624 373.464 li
232.92 375.12 li
234 376.128 li
244.224 376.128 mo
244.872 375.84 li
246.24 375.192 li
247.536 374.616 li
248.904 374.184 li
250.2 373.896 li
251.568 373.752 li
252.864 373.68 li
254.232 373.752 li
255.528 373.896 li
256.896 374.04 li
258.192 374.184 li
259.56 374.328 li
260.856 374.472 li
262.224 374.544 li
263.52 374.544 li
264.888 374.616 li
267.552 374.616 li
268.848 374.688 li
270.144 374.688 li
271.512 374.76 li
272.808 374.76 li
274.176 374.832 li
275.472 374.904 li
276.84 374.976 li
278.136 375.048 li
279.504 375.12 li
280.8 375.192 li
282.168 375.192 li
283.464 375.264 li
284.832 375.264 li
286.128 375.336 li
287.496 375.336 li
288.792 375.408 li
290.16 375.48 li
291.456 375.48 li
292.824 375.552 li
294.12 375.48 li
295.488 375.48 li
296.784 375.408 li
298.152 375.336 li
299.448 375.264 li
300.744 375.12 li
302.112 375.048 li
303.408 374.976 li
304.775 374.832 li
306.071 374.76 li
307.439 374.688 li
308.735 374.616 li
311.399 374.616 li
312.767 374.544 li
320.759 374.544 li
322.055 374.472 li
327.383 374.472 li
328.751 374.544 li
330.047 374.616 li
331.343 374.76 li
332.711 374.832 li
334.007 374.976 li
335.375 375.12 li
336.671 375.192 li
338.039 375.336 li
339.335 375.408 li
340.703 375.48 li
341.999 375.552 li
346.031 375.552 li
347.327 375.48 li
348.695 375.48 li
349.991 375.408 li
351.359 375.264 li
352.655 375.192 li
354.023 375.048 li
355.319 374.832 li
356.687 374.688 li
357.983 374.544 li
359.351 374.328 li
361.943 374.04 li
363.311 373.896 li
364.607 373.752 li
365.975 373.608 li
367.271 373.464 li
368.639 373.32 li
369.935 373.176 li
371.303 373.104 li
372.599 372.96 li
373.967 372.816 li
375.263 372.672 li
376.631 372.6 li
377.927 372.456 li
379.295 372.312 li
380.591 372.24 li
381.959 372.168 li
383.255 372.096 li
384.623 372.024 li
388.583 372.024 li
389.951 372.096 li
392.542 372.24 li
393.91 372.312 li
395.206 372.456 li
396.574 372.528 li
397.87 372.672 li
399.238 372.816 li
400.534 372.96 li
401.902 373.104 li
403.198 373.176 li
404.566 373.32 li
405.862 373.464 li
@
405.862 373.464 mo
407.23 373.608 li
408.526 373.752 li
409.894 373.896 li
411.19 374.04 li
412.558 374.184 li
413.854 374.4 li
415.222 374.544 li
416.518 374.688 li
417.886 374.832 li
419.182 375.048 li
420.55 375.192 li
423.142 375.624 li
424.51 375.768 li
425.806 375.984 li
427.174 376.128 li
427.246 376.128 li
@
1.44 lw
207 360.288 mo
207.648 360.072 li
208.944 359.856 li
210.312 359.784 li
211.608 359.856 li
212.976 359.928 li
214.272 360.072 li
215.64 360.216 li
216.936 360.288 li
218.16 360.288 li
228.168 364.032 mo
228.96 364.824 li
230.256 366.048 li
231.624 367.2 li
232.92 368.064 li
234.288 368.496 li
235.584 368.568 li
236.952 368.28 li
237.744 367.92 li
247.32 362.088 mo
247.536 361.944 li
248.904 361.296 li
250.2 360.72 li
251.568 360.288 li
252.864 360.072 li
254.232 360.072 li
255.528 360.144 li
256.896 360.36 li
258.12 360.576 li
269.28 361.728 mo
270.144 361.872 li
271.512 362.16 li
272.808 362.448 li
274.176 362.736 li
275.472 362.952 li
276.84 363.168 li
278.136 363.312 li
279.504 363.384 li
280.368 363.384 li
291.6 363.6 mo
292.824 363.6 li
294.12 363.528 li
295.488 363.312 li
296.784 363.096 li
298.152 362.736 li
300.744 361.872 li
302.112 361.44 li
302.472 361.296 li
313.416 358.848 mo
314.064 358.776 li
315.432 358.776 li
316.728 358.848 li
318.096 358.92 li
319.392 359.064 li
320.76 359.208 li
322.056 359.424 li
323.424 359.64 li
324.576 359.784 li
335.448 362.592 mo
336.672 363.024 li
338.04 363.456 li
339.336 363.888 li
340.704 364.248 li
342 364.536 li
343.368 364.752 li
344.664 364.968 li
346.032 365.112 li
346.32 365.112 li
357.552 364.608 mo
357.984 364.536 li
359.352 364.392 li
360.648 364.32 li
361.944 364.176 li
363.312 364.032 li
364.608 363.96 li
365.976 363.816 li
367.272 363.672 li
368.64 363.528 li
368.712 363.528 li
379.872 362.448 mo
380.592 362.376 li
381.96 362.376 li
383.256 362.304 li
385.92 362.304 li
387.288 362.376 li
388.584 362.448 li
389.952 362.592 li
391.104 362.736 li
402.048 365.112 mo
403.2 365.4 li
404.568 365.832 li
405.864 366.192 li
407.232 366.624 li
408.528 367.056 li
409.896 367.488 li
411.192 367.92 li
412.56 368.352 li
412.776 368.424 li
423.504 371.808 mo
424.512 372.096 li
425.808 372.528 li
427.176 372.888 li
428.472 373.248 li
429.84 373.536 li
431.136 373.896 li
432.504 374.184 li
433.8 374.472 li
434.376 374.544 li
445.536 375.984 mo
445.824 375.984 li
447.12 376.056 li
448.488 376.128 li
452.448 376.128 li
453.744 376.056 li
455.112 375.984 li
456.408 375.912 li
456.768 375.912 li
467.856 374.544 mo
468.432 374.472 li
469.728 374.328 li
471.096 374.184 li
472.392 374.04 li
473.76 373.896 li
475.056 373.824 li
476.424 373.752 li
477.72 373.68 li
479.088 373.68 li
490.32 374.112 mo
491.04 374.112 li
@
491.04 374.112 mo
492.336 374.184 li
493.704 374.328 li
495 374.4 li
496.368 374.472 li
497.664 374.616 li
499.032 374.688 li
500.328 374.832 li
501.48 374.904 li
512.712 375.984 mo
513.648 376.056 li
514.944 376.128 li
516.312 376.128 li
207 358.128 mo
207.648 358.056 li
208.944 358.056 li
210.312 358.2 li
211.608 358.344 li
212.976 358.344 li
214.272 358.272 li
215.64 358.056 li
215.928 357.984 li
222.048 355.32 mo
222.264 355.176 li
223.128 354.888 li
229.464 356.328 mo
230.256 356.76 li
231.624 357.552 li
232.92 358.2 li
234.288 358.632 li
235.584 358.848 li
236.952 358.632 li
237.816 358.344 li
243.216 354.384 mo
243.576 354.096 li
244.08 353.664 li
249.408 349.488 mo
250.2 348.984 li
251.568 348.336 li
252.864 347.904 li
254.232 347.688 li
255.528 347.616 li
256.896 347.688 li
257.976 347.832 li
264.672 348.48 mo
264.888 348.48 li
265.752 348.552 li
272.376 349.704 mo
272.808 349.848 li
274.176 350.28 li
275.472 350.64 li
276.84 350.928 li
278.136 351.144 li
279.504 351.288 li
280.8 351.36 li
281.16 351.36 li
287.928 351.648 mo
289.008 351.648 li
295.776 351.432 mo
296.784 351.288 li
298.152 351.072 li
300.744 350.496 li
302.112 350.28 li
303.408 350.064 li
304.632 349.92 li
311.328 349.416 mo
312.48 349.416 li
319.176 349.632 mo
319.392 349.632 li
320.76 349.704 li
322.056 349.848 li
323.424 349.92 li
324.72 350.064 li
326.088 350.136 li
327.384 350.208 li
328.176 350.28 li
334.8 351.072 mo
335.376 351.216 li
335.952 351.288 li
342.576 352.368 mo
343.368 352.44 li
344.664 352.512 li
346.032 352.656 li
347.328 352.728 li
348.696 352.8 li
349.992 352.872 li
351.36 352.944 li
351.576 352.944 li
358.272 352.944 mo
359.424 352.944 li
366.12 353.736 mo
367.272 353.952 li
368.64 354.168 li
369.936 354.384 li
@
369.936 354.384 mo
371.304 354.528 li
372.6 354.6 li
373.968 354.672 li
375.048 354.672 li
381.744 354.528 mo
382.896 354.528 li
389.592 354.816 mo
389.952 354.816 li
391.248 354.96 li
392.544 355.176 li
393.912 355.464 li
395.208 355.752 li
396.576 356.112 li
397.872 356.544 li
398.376 356.76 li
404.64 359.136 mo
405.648 359.568 li
411.912 362.16 mo
413.856 363.024 li
415.224 363.528 li
416.52 364.032 li
417.888 364.536 li
419.184 365.04 li
420.264 365.472 li
426.6 367.776 mo
427.176 367.992 li
427.68 368.136 li
434.232 369.648 mo
435.168 369.864 li
436.464 370.008 li
437.832 370.152 li
439.128 370.224 li
440.496 370.296 li
443.16 370.296 li
449.856 370.152 mo
451.008 370.152 li
457.776 369.72 mo
457.776 369.72 li
459.072 369.648 li
460.44 369.576 li
461.736 369.504 li
463.104 369.504 li
464.4 369.432 li
466.704 369.432 li
473.472 369.504 mo
473.76 369.504 li
474.552 369.576 li
481.248 370.224 mo
481.752 370.224 li
483.048 370.44 li
484.344 370.584 li
485.712 370.728 li
487.008 370.872 li
488.376 371.016 li
489.672 371.16 li
490.176 371.232 li
496.872 371.952 mo
497.664 372.024 li
498.024 372.096 li
504.72 372.816 mo
505.656 372.96 li
507.024 373.104 li
508.32 373.248 li
509.688 373.392 li
510.984 373.536 li
512.352 373.608 li
513.648 373.752 li
520.416 374.04 mo
521.496 374.04 li
528.264 374.184 mo
529.632 374.184 li
530.928 374.256 li
532.296 374.256 li
533.592 374.328 li
534.96 374.4 li
536.256 374.472 li
537.192 374.544 li
543.96 375.048 mo
544.248 375.12 li
545.04 375.12 li
207 356.976 mo
208.08 356.976 li
214.776 356.688 mo
215.784 356.184 li
220.464 351.432 mo
220.968 350.856 li
221.184 350.568 li
225.36 345.312 mo
226.224 344.52 li
232.632 343.512 mo
232.92 343.584 li
233.712 343.728 li
240.192 342.504 mo
240.912 342.072 li
241.128 341.928 li
247.032 338.688 mo
247.536 338.472 li
248.112 338.256 li
254.736 337.536 mo
255.528 337.68 li
255.816 337.752 li
262.512 338.544 mo
263.592 338.544 li
270.288 338.184 mo
271.44 338.328 li
277.92 340.2 mo
278.136 340.272 li
279 340.488 li
285.624 341.496 mo
286.128 341.496 li
286.776 341.568 li
293.472 342.36 mo
294.12 342.432 li
294.552 342.432 li
301.32 342.216 mo
302.112 342.144 li
302.4 342.072 li
309.168 341.784 mo
310.248 341.784 li
317.016 341.784 mo
318.096 341.712 li
318.168 341.712 li
324.864 341.784 mo
326.016 341.712 li
332.712 341.712 mo
333.864 341.784 li
340.56 342.576 mo
340.704 342.576 li
@
340.704 342.576 mo
341.64 342.648 li
348.408 343.152 mo
348.696 343.224 li
349.488 343.296 li
356.256 343.512 mo
356.688 343.512 li
357.336 343.584 li
363.96 344.88 mo
365.04 345.24 li
371.448 347.256 mo
372.528 347.544 li
379.224 348.192 mo
379.296 348.264 li
380.376 348.264 li
387.072 348.768 mo
387.288 348.768 li
388.152 348.912 li
394.704 350.712 mo
395.208 350.856 li
395.712 351.072 li
401.832 353.88 mo
401.904 353.952 li
402.84 354.384 li
408.96 357.192 mo
409.896 357.552 li
410.04 357.624 li
416.232 360.144 mo
416.52 360.288 li
417.312 360.576 li
423.648 362.808 mo
424.728 363.168 li
431.28 364.608 mo
432.432 364.752 li
439.128 365.184 mo
440.28 365.184 li
446.976 365.184 mo
448.128 365.184 li
454.824 365.184 mo
455.976 365.184 li
462.744 365.256 mo
463.824 365.256 li
470.592 365.616 mo
471.096 365.616 li
471.672 365.688 li
478.368 366.48 mo
479.088 366.624 li
479.52 366.696 li
486.144 367.632 mo
487.008 367.776 li
487.296 367.776 li
493.992 368.568 mo
495 368.712 li
495.072 368.712 li
501.768 369.648 mo
502.848 369.792 li
509.544 370.8 mo
509.688 370.872 li
510.624 371.016 li
517.32 371.736 mo
517.608 371.736 li
518.472 371.808 li
525.168 372.312 mo
525.6 372.384 li
526.32 372.384 li
533.016 373.032 mo
533.592 373.104 li
534.096 373.176 li
540.792 373.968 mo
541.584 374.04 li
541.944 374.112 li
207 356.544 mo
207.648 356.544 li
208.944 356.616 li
210.312 356.688 li
211.608 356.688 li
212.976 356.472 li
214.272 356.04 li
215.64 355.32 li
220.032 350.208 mo
220.608 349.272 li
224.064 343.44 mo
224.64 342.504 li
229.104 337.608 mo
230.184 337.104 li
236.88 336.528 mo
236.952 336.528 li
238.248 336.168 li
239.544 335.592 li
240.912 334.872 li
242.208 334.152 li
243.576 333.36 li
244.872 332.712 li
244.944 332.712 li
251.352 330.768 mo
251.568 330.696 li
252.432 330.696 li
259.2 331.344 mo
259.56 331.344 li
260.28 331.416 li
267.048 331.2 mo
267.552 331.2 li
268.128 331.272 li
274.608 333.072 mo
275.472 333.36 li
276.84 333.792 li
278.136 334.224 li
279.504 334.512 li
280.8 334.728 li
282.168 335.016 li
283.32 335.16 li
289.944 336.312 mo
290.16 336.384 li
291.024 336.528 li
297.72 337.176 mo
298.152 337.104 li
298.872 337.104 li
305.64 337.032 mo
306.72 337.032 li
313.488 336.6 mo
314.064 336.528 li
315.432 336.384 li
316.728 336.168 li
318.096 335.952 li
319.392 335.808 li
320.76 335.592 li
322.056 335.52 li
322.344 335.448 li
@
329.112 335.16 mo
330.192 335.16 li
@
336.888 335.952 mo
338.04 336.096 li
344.736 336.312 mo
345.888 336.384 li
352.584 336.6 mo
352.656 336.6 li
354.024 336.528 li
355.32 336.528 li
356.688 336.6 li
357.984 336.744 li
359.352 336.96 li
360.648 337.248 li
361.512 337.536 li
367.776 339.984 mo
368.784 340.488 li
375.12 342.72 mo
375.264 342.792 li
376.2 343.008 li
382.824 344.232 mo
383.256 344.232 li
383.976 344.376 li
390.528 345.888 mo
391.248 346.104 li
392.544 346.536 li
393.912 347.04 li
395.208 347.544 li
396.576 348.192 li
397.872 348.84 li
398.808 349.272 li
404.784 352.368 mo
405.792 352.872 li
411.984 355.608 mo
412.56 355.824 li
412.992 356.04 li
419.328 358.344 mo
420.408 358.704 li
426.888 360.576 mo
427.176 360.648 li
428.472 360.864 li
429.84 361.008 li
431.136 361.152 li
432.504 361.224 li
433.8 361.296 li
435.816 361.296 li
442.512 360.936 mo
443.664 360.936 li
450.36 360.72 mo
451.512 360.72 li
458.28 360.792 mo
459.072 360.864 li
459.36 360.864 li
466.128 361.296 mo
467.064 361.368 li
468.432 361.512 li
469.728 361.656 li
471.096 361.872 li
472.392 362.088 li
473.76 362.376 li
474.984 362.592 li
481.536 364.104 mo
481.752 364.176 li
482.616 364.32 li
489.24 365.616 mo
489.672 365.688 li
490.392 365.76 li
497.016 366.768 mo
497.664 366.84 li
498.168 366.912 li
504.864 367.776 mo
505.656 367.848 li
507.024 368.064 li
508.32 368.208 li
509.688 368.352 li
510.984 368.496 li
512.352 368.64 li
513.648 368.784 li
513.792 368.784 li
520.488 369.504 mo
521.568 369.648 li
528.264 370.584 mo
528.264 370.584 li
529.344 370.8 li
535.968 371.952 mo
536.256 371.952 li
537.12 372.096 li
543.744 373.104 mo
544.248 373.176 li
545.544 373.32 li
546.912 373.464 li
@
1.8 lw
207 474.408 mo
622.728 474.408 li
622.728 376.128 li
207 376.128 li
207 474.408 li
207 467.28 li
223.632 474.408 mo
223.632 470.88 li
240.264 474.408 mo
240.264 470.88 li
256.896 474.408 mo
256.896 470.88 li
273.528 474.408 mo
273.528 470.88 li
290.16 474.408 mo
290.16 467.28 li
306.792 474.408 mo
306.792 470.88 li
323.424 474.408 mo
323.424 470.88 li
340.056 474.408 mo
340.056 470.88 li
356.688 474.408 mo
356.688 470.88 li
373.32 474.408 mo
373.32 467.28 li
389.952 474.408 mo
389.952 470.88 li
406.512 474.408 mo
406.512 470.88 li
423.144 474.408 mo
423.144 470.88 li
439.776 474.408 mo
439.776 470.88 li
456.408 474.408 mo
456.408 467.28 li
473.04 474.408 mo
473.04 470.88 li
489.672 474.408 mo
489.672 470.88 li
506.304 474.408 mo
506.304 470.88 li
522.936 474.408 mo
522.936 470.88 li
539.568 474.408 mo
539.568 467.28 li
556.2 474.408 mo
556.2 470.88 li
572.832 474.408 mo
572.832 470.88 li
589.464 474.408 mo
589.464 470.88 li
606.096 474.408 mo
606.096 470.88 li
622.728 474.408 mo
622.728 467.28 li
207 383.256 mo
207 376.128 li
223.632 379.728 mo
223.632 376.128 li
240.264 379.728 mo
240.264 376.128 li
256.896 379.728 mo
256.896 376.128 li
273.528 379.728 mo
273.528 376.128 li
290.16 383.256 mo
290.16 376.128 li
306.792 379.728 mo
306.792 376.128 li
323.424 379.728 mo
323.424 376.128 li
340.056 379.728 mo
340.056 376.128 li
356.688 379.728 mo
356.688 376.128 li
373.32 383.256 mo
373.32 376.128 li
389.952 379.728 mo
389.952 376.128 li
406.512 379.728 mo
406.512 376.128 li
423.144 379.728 mo
423.144 376.128 li
439.776 379.728 mo
439.776 376.128 li
456.408 383.256 mo
456.408 376.128 li
473.04 379.728 mo
473.04 376.128 li
489.672 379.728 mo
489.672 376.128 li
506.304 379.728 mo
506.304 376.128 li
522.936 379.728 mo
522.936 376.128 li
539.568 383.256 mo
539.568 376.128 li
556.2 379.728 mo
556.2 376.128 li
572.832 379.728 mo
572.832 376.128 li
589.464 379.728 mo
589.464 376.128 li
606.096 379.728 mo
606.096 376.128 li
622.728 383.256 mo
622.728 376.128 li
200.304 484.848 mo
201.312 484.416 li
202.68 482.976 li
202.68 492.984 li
211.248 482.976 mo
209.808 483.48 li
208.872 484.848 li
208.44 487.224 li
208.44 488.664 li
208.872 491.04 li
209.808 492.48 li
211.248 492.984 li
212.184 492.984 li
213.624 492.48 li
214.56 491.04 li
215.064 488.664 li
215.064 487.224 li
214.56 484.848 li
213.624 483.48 li
212.184 482.976 li
@
212.184 482.976 mo
211.248 482.976 li
282.528 485.352 mo
282.528 484.848 li
283.032 483.912 li
283.464 483.48 li
284.4 482.976 li
286.344 482.976 li
287.28 483.48 li
287.784 483.912 li
288.216 484.848 li
288.216 485.856 li
287.784 486.792 li
286.776 488.232 li
282.024 492.984 li
288.72 492.984 li
294.408 482.976 mo
292.968 483.48 li
292.032 484.848 li
291.528 487.224 li
291.528 488.664 li
292.032 491.04 li
292.968 492.48 li
294.408 492.984 li
295.344 492.984 li
296.784 492.48 li
297.72 491.04 li
298.224 488.664 li
298.224 487.224 li
297.72 484.848 li
296.784 483.48 li
295.344 482.976 li
294.408 482.976 li
366.192 482.976 mo
371.376 482.976 li
368.568 486.792 li
369.936 486.792 li
370.944 487.224 li
371.376 487.728 li
371.88 489.168 li
371.88 490.104 li
371.376 491.544 li
370.44 492.48 li
369 492.984 li
367.56 492.984 li
366.192 492.48 li
365.688 491.976 li
365.184 491.04 li
377.568 482.976 mo
376.128 483.48 li
375.192 484.848 li
374.688 487.224 li
374.688 488.664 li
375.192 491.04 li
376.128 492.48 li
377.568 492.984 li
378.504 492.984 li
379.944 492.48 li
380.88 491.04 li
381.384 488.664 li
381.384 487.224 li
380.88 484.848 li
379.944 483.48 li
378.504 482.976 li
377.568 482.976 li
453.096 482.976 mo
448.344 489.6 li
455.472 489.6 li
453.096 482.976 mo
453.096 492.984 li
460.728 482.976 mo
459.288 483.48 li
458.352 484.848 li
457.848 487.224 li
457.848 488.664 li
458.352 491.04 li
459.288 492.48 li
460.728 492.984 li
461.664 492.984 li
463.104 492.48 li
464.04 491.04 li
464.544 488.664 li
464.544 487.224 li
464.04 484.848 li
463.104 483.48 li
461.664 482.976 li
460.728 482.976 li
537.192 482.976 mo
532.44 482.976 li
532.008 487.224 li
532.44 486.792 li
533.88 486.288 li
535.32 486.288 li
536.76 486.792 li
537.696 487.728 li
538.2 489.168 li
538.2 490.104 li
537.696 491.544 li
536.76 492.48 li
535.32 492.984 li
533.88 492.984 li
532.44 492.48 li
532.008 491.976 li
531.504 491.04 li
543.888 482.976 mo
542.448 483.48 li
541.512 484.848 li
541.008 487.224 li
541.008 488.664 li
541.512 491.04 li
542.448 492.48 li
543.888 492.984 li
544.824 492.984 li
546.264 492.48 li
547.2 491.04 li
547.632 488.664 li
547.632 487.224 li
547.2 484.848 li
546.264 483.48 li
544.824 482.976 li
543.888 482.976 li
620.856 484.416 mo
620.352 483.48 li
618.912 482.976 li
617.976 482.976 li
616.536 483.48 li
615.6 484.848 li
615.168 487.224 li
@
615.168 487.224 mo
615.168 489.6 li
615.6 491.544 li
616.536 492.48 li
617.976 492.984 li
618.48 492.984 li
619.92 492.48 li
620.856 491.544 li
621.288 490.104 li
621.288 489.6 li
@
621.288 489.6 mo
620.856 488.232 li
619.92 487.224 li
618.48 486.792 li
617.976 486.792 li
616.536 487.224 li
615.6 488.232 li
615.168 489.6 li
627.048 482.976 mo
625.608 483.48 li
624.672 484.848 li
624.168 487.224 li
624.168 488.664 li
624.672 491.04 li
625.608 492.48 li
627.048 492.984 li
627.984 492.984 li
629.424 492.48 li
630.36 491.04 li
630.792 488.664 li
630.792 487.224 li
630.36 484.848 li
629.424 483.48 li
627.984 482.976 li
627.048 482.976 li
207 474.408 mo
214.128 474.408 li
207 462.168 mo
210.528 462.168 li
207 449.856 mo
214.128 449.856 li
207 437.544 mo
210.528 437.544 li
207 425.304 mo
214.128 425.304 li
207 412.992 mo
210.528 412.992 li
207 400.752 mo
214.128 400.752 li
207 388.44 mo
210.528 388.44 li
207 376.128 mo
214.128 376.128 li
615.6 474.408 mo
622.728 474.408 li
619.2 462.168 mo
622.728 462.168 li
615.6 449.856 mo
622.728 449.856 li
619.2 437.544 mo
622.728 437.544 li
615.6 425.304 mo
622.728 425.304 li
619.2 412.992 mo
622.728 412.992 li
615.6 400.752 mo
622.728 400.752 li
619.2 388.44 mo
622.728 388.44 li
615.6 376.128 mo
622.728 376.128 li
189.432 474.912 mo
189.936 476.496 li
191.52 477.504 li
194.112 478.08 li
195.696 478.08 li
198.288 477.504 li
199.8 476.496 li
200.304 474.912 li
200.304 473.904 li
199.8 472.32 li
198.288 471.312 li
195.696 470.808 li
194.112 470.808 li
191.52 471.312 li
189.936 472.32 li
189.432 473.904 li
189.432 474.912 li
192.024 428.4 mo
191.52 428.4 li
190.512 427.896 li
189.936 427.392 li
189.432 426.312 li
189.432 424.224 li
189.936 423.216 li
190.512 422.712 li
191.52 422.208 li
192.528 422.208 li
193.608 422.712 li
195.12 423.72 li
200.304 428.904 li
200.304 421.632 li
223.056 389.808 mo
217.872 389.808 li
217.368 394.488 li
217.872 393.984 li
219.456 393.48 li
220.968 393.48 li
222.552 393.984 li
223.56 394.992 li
224.136 396.576 li
224.136 397.584 li
223.56 399.168 li
222.552 400.176 li
220.968 400.752 li
219.456 400.752 li
217.872 400.176 li
217.368 399.672 li
216.864 398.664 li
228.744 391.896 mo
229.824 391.392 li
231.336 389.808 li
231.336 400.752 li
238.104 392.4 mo
238.104 391.896 li
238.608 390.888 li
239.112 390.384 li
240.192 389.808 li
242.28 389.808 li
243.288 390.384 li
243.792 390.888 li
244.296 391.896 li
244.296 392.976 li
243.792 393.984 li
242.784 395.568 li
237.6 400.752 li
244.872 400.752 li
207 451.224 mo
207.648 451.368 li
@
207.648 451.368 mo
208.944 451.512 li
210.312 451.584 li
211.608 451.584 li
212.976 451.368 li
214.272 450.792 li
215.64 449.928 li
216.936 448.632 li
218.304 446.976 li
219.6 444.96 li
220.968 442.656 li
222.264 440.28 li
223.632 437.976 li
224.928 435.816 li
226.296 433.944 li
227.592 432.504 li
228.96 431.496 li
230.256 430.848 li
231.624 430.56 li
232.92 430.416 li
234.288 430.344 li
235.584 430.2 li
236.952 429.768 li
238.248 429.192 li
239.544 428.544 li
240.912 427.896 li
242.208 427.32 li
243.576 426.888 li
244.872 426.672 li
246.24 426.744 li
247.536 426.96 li
248.904 427.392 li
250.2 427.896 li
251.568 428.4 li
252.864 428.904 li
254.232 429.336 li
255.528 429.552 li
256.896 429.624 li
258.192 429.552 li
259.56 429.336 li
260.856 428.976 li
262.224 428.4 li
263.52 427.68 li
264.888 426.96 li
266.184 426.168 li
267.552 425.448 li
268.848 424.872 li
270.144 424.368 li
271.512 424.08 li
272.808 424.008 li
274.176 424.152 li
275.472 424.368 li
276.84 424.8 li
278.136 425.304 li
279.504 425.88 li
280.8 426.528 li
282.168 427.104 li
283.464 427.608 li
284.832 428.04 li
286.128 428.328 li
287.496 428.544 li
288.792 428.616 li
290.16 428.616 li
291.456 428.544 li
294.12 428.544 li
295.488 428.616 li
296.784 428.832 li
298.152 429.12 li
299.448 429.624 li
300.744 430.2 li
302.112 430.92 li
303.408 431.712 li
304.775 432.576 li
306.071 433.512 li
307.439 434.448 li
308.735 435.312 li
310.103 436.176 li
311.399 436.896 li
312.767 437.616 li
314.063 438.264 li
315.431 438.768 li
316.727 439.272 li
318.095 439.632 li
319.391 439.92 li
320.759 440.208 li
322.055 440.352 li
323.423 440.424 li
324.719 440.424 li
326.087 440.352 li
327.383 440.136 li
328.751 439.848 li
331.343 438.984 li
332.711 438.408 li
334.007 437.76 li
335.375 437.04 li
336.671 436.176 li
@
336.671 436.176 mo
338.039 435.24 li
339.335 434.232 li
340.703 433.152 li
341.999 432 li
343.367 430.92 li
344.663 429.912 li
346.031 428.904 li
347.327 427.968 li
348.695 427.176 li
349.991 426.528 li
351.359 425.952 li
352.655 425.52 li
354.023 425.16 li
355.319 424.944 li
356.687 424.872 li
357.983 424.872 li
359.351 424.944 li
361.943 425.376 li
363.311 425.736 li
364.607 426.168 li
365.975 426.672 li
367.271 427.176 li
368.639 427.752 li
369.935 428.4 li
371.303 429.048 li
372.599 429.696 li
373.967 430.416 li
375.263 431.064 li
376.631 431.712 li
377.927 432.36 li
379.295 433.008 li
380.591 433.512 li
381.959 434.016 li
383.255 434.52 li
384.623 434.952 li
385.919 435.384 li
387.287 435.816 li
388.583 436.248 li
389.951 436.608 li
392.542 437.472 li
393.91 437.904 li
395.206 438.408 li
396.574 438.984 li
397.87 439.632 li
399.238 440.28 li
400.534 441 li
401.902 441.792 li
403.198 442.584 li
404.566 443.448 li
405.862 444.384 li
407.23 445.248 li
408.526 446.184 li
409.894 447.048 li
411.19 447.912 li
412.558 448.704 li
413.854 449.496 li
415.222 450.216 li
416.518 450.864 li
417.886 451.44 li
419.182 451.944 li
420.55 452.376 li
421.846 452.808 li
423.142 453.168 li
424.51 453.384 li
425.806 453.6 li
427.174 453.744 li
428.47 453.816 li
431.134 453.816 li
432.502 453.744 li
433.798 453.672 li
435.166 453.528 li
436.462 453.384 li
437.83 453.24 li
439.126 453.096 li
440.494 452.88 li
441.79 452.664 li
443.158 452.448 li
444.454 452.16 li
445.822 451.944 li
447.118 451.656 li
448.486 451.368 li
449.782 451.152 li
451.15 450.864 li
452.446 450.576 li
453.742 450.36 li
455.11 450.144 li
456.406 449.928 li
457.774 449.712 li
459.07 449.568 li
460.438 449.424 li
461.734 449.28 li
463.102 449.136 li
464.398 449.064 li
465.766 448.992 li
468.43 448.992 li
469.726 449.136 li
471.094 449.28 li
472.39 449.424 li
473.758 449.64 li
473.76 449.64 mo
475.056 449.856 li
476.424 450.072 li
477.72 450.36 li
479.088 450.648 li
480.384 450.936 li
481.752 451.224 li
484.344 451.944 li
485.712 452.304 li
487.008 452.664 li
488.376 453.024 li
489.672 453.384 li
491.04 453.744 li
492.336 454.104 li
493.704 454.392 li
495 454.752 li
496.368 455.04 li
497.664 455.328 li
499.032 455.544 li
500.328 455.832 li
501.696 456.12 li
502.992 456.408 li
504.36 456.696 li
505.656 456.984 li
507.024 457.272 li
508.32 457.632 li
509.688 457.92 li
510.984 458.208 li
@
510.984 458.208 mo
512.352 458.568 li
513.648 458.856 li
514.944 459.072 li
516.312 459.36 li
517.608 459.648 li
518.976 459.936 li
520.272 460.152 li
521.64 460.44 li
522.935 460.728 li
524.303 460.944 li
525.599 461.232 li
526.967 461.448 li
528.263 461.664 li
529.631 461.952 li
530.927 462.24 li
532.295 462.456 li
533.591 462.744 li
534.959 463.104 li
536.255 463.393 li
537.623 463.681 li
538.919 463.969 li
540.287 464.329 li
541.583 464.617 li
542.951 464.905 li
545.543 465.481 li
546.911 465.769 li
@
.36 lw
207 463.248 mo
207.648 462.888 li
208.944 462.24 li
210.312 461.592 li
211.608 460.872 li
212.976 460.152 li
214.272 459.504 li
215.64 458.856 li
216.936 458.28 li
218.304 457.92 li
219.6 457.776 li
220.968 457.92 li
222.264 458.496 li
223.632 459.432 li
224.928 460.872 li
226.296 462.672 li
227.592 464.76 li
228.96 467.064 li
230.256 469.296 li
231.624 471.384 li
232.92 473.256 li
234 474.408 li
247.32 474.408 mo
247.536 474.336 li
248.904 473.976 li
250.2 473.688 li
251.568 473.472 li
252.864 473.328 li
255.528 473.328 li
256.896 473.4 li
258.192 473.472 li
259.56 473.616 li
260.856 473.688 li
262.224 473.76 li
263.52 473.832 li
264.888 473.904 li
268.848 473.904 li
270.144 473.832 li
271.512 473.76 li
272.808 473.688 li
274.176 473.688 li
275.472 473.616 li
280.8 473.616 li
282.168 473.544 li
286.128 473.544 li
287.496 473.472 li
288.792 473.472 li
290.16 473.4 li
292.824 473.4 li
294.12 473.328 li
300.744 473.328 li
302.112 473.4 li
310.104 473.4 li
311.4 473.328 li
319.392 473.328 li
320.759 473.4 li
324.719 473.4 li
326.087 473.472 li
330.047 473.472 li
331.343 473.4 li
332.711 473.4 li
334.007 473.328 li
335.375 473.256 li
336.671 473.184 li
338.039 473.04 li
339.335 472.896 li
340.703 472.752 li
341.999 472.536 li
343.367 472.392 li
344.663 472.176 li
346.031 471.96 li
347.327 471.744 li
348.695 471.528 li
349.991 471.384 li
351.359 471.168 li
352.655 470.952 li
354.023 470.808 li
355.319 470.664 li
356.687 470.52 li
357.983 470.376 li
359.351 470.232 li
361.943 470.088 li
363.311 470.088 li
364.607 470.016 li
368.639 470.016 li
369.935 470.088 li
371.303 470.088 li
372.599 470.16 li
373.967 470.232 li
375.263 470.376 li
376.631 470.448 li
377.927 470.592 li
379.295 470.664 li
380.591 470.808 li
381.959 470.88 li
383.255 470.952 li
384.623 471.024 li
385.919 471.096 li
387.287 471.168 li
388.583 471.24 li
389.951 471.24 li
391.247 471.312 li
392.543 471.312 li
393.911 471.384 li
395.207 471.384 li
396.575 471.456 li
397.871 471.456 li
399.239 471.528 li
400.535 471.672 li
401.903 471.744 li
403.199 471.888 li
404.567 471.96 li
405.863 472.104 li
407.231 472.248 li
408.527 472.392 li
409.895 472.536 li
411.19 472.68 li
412.558 472.824 li
413.854 472.968 li
415.222 473.112 li
416.518 473.256 li
417.886 473.4 li
419.182 473.472 li
420.55 473.616 li
421.846 473.76 li
423.142 473.832 li
424.51 473.904 li
425.806 473.976 li
@
425.806 473.976 mo
427.174 474.048 li
428.47 474.12 li
432.502 474.12 li
433.798 474.048 li
435.166 474.048 li
436.462 473.976 li
437.83 473.904 li
439.126 473.832 li
440.494 473.832 li
441.79 473.76 li
443.158 473.688 li
444.454 473.616 li
445.822 473.544 li
447.118 473.473 li
448.486 473.473 li
449.782 473.401 li
451.15 473.329 li
452.446 473.329 li
453.742 473.257 li
465.766 473.257 li
467.062 473.329 li
471.094 473.329 li
472.39 473.401 li
475.054 473.401 li
476.422 473.473 li
477.718 473.473 li
479.086 473.545 li
480.382 473.545 li
481.75 473.617 li
484.342 473.761 li
@
484.342 473.761 mo
485.71 473.833 li
487.006 473.905 li
488.374 473.977 li
489.67 474.049 li
491.038 474.121 li
492.334 474.193 li
493.702 474.265 li
494.998 474.337 li
496.366 474.337 li
497.59 474.409 li
@
1.44 lw
207 455.904 mo
207.648 455.688 li
208.944 455.328 li
210.312 455.256 li
211.608 455.256 li
212.976 455.4 li
214.272 455.616 li
215.64 455.76 li
216.936 455.832 li
218.088 455.904 li
227.448 461.16 mo
227.592 461.304 li
228.96 463.032 li
230.256 464.76 li
231.624 466.272 li
232.92 467.496 li
234.288 468.288 li
235.512 468.648 li
245.664 464.544 mo
246.24 464.184 li
247.536 463.608 li
248.904 463.176 li
250.2 462.888 li
251.568 462.816 li
252.864 462.816 li
254.232 462.888 li
255.528 463.032 li
256.536 463.176 li
267.768 463.896 mo
268.848 463.896 li
270.144 463.824 li
271.512 463.824 li
272.808 463.752 li
275.472 463.752 li
276.84 463.824 li
278.136 463.824 li
279 463.896 li
290.16 463.824 mo
291.456 463.68 li
292.824 463.536 li
294.12 463.464 li
295.488 463.392 li
296.784 463.32 li
299.448 463.32 li
300.744 463.392 li
301.392 463.392 li
312.624 463.752 mo
312.768 463.752 li
314.064 463.896 li
315.432 463.968 li
316.728 464.112 li
318.096 464.328 li
319.392 464.544 li
320.76 464.76 li
322.056 465.048 li
323.424 465.408 li
323.712 465.48 li
334.512 468.504 mo
335.376 468.72 li
336.672 468.936 li
338.04 469.08 li
339.336 469.224 li
340.704 469.224 li
342 469.152 li
343.368 469.008 li
344.664 468.864 li
345.672 468.72 li
356.76 466.992 mo
357.984 466.92 li
359.352 466.848 li
360.648 466.776 li
363.312 466.776 li
364.608 466.848 li
365.976 466.848 li
367.272 466.92 li
367.992 466.992 li
379.152 467.784 mo
380.592 467.784 li
381.96 467.856 li
383.256 467.784 li
384.624 467.784 li
385.92 467.712 li
387.288 467.64 li
388.584 467.496 li
389.952 467.424 li
390.384 467.424 li
401.616 467.424 mo
401.904 467.424 li
403.2 467.64 li
404.568 467.856 li
405.864 468.072 li
407.232 468.36 li
408.528 468.648 li
409.896 468.936 li
411.192 469.224 li
412.56 469.44 li
412.632 469.512 li
423.648 471.528 mo
424.512 471.6 li
425.808 471.744 li
427.176 471.888 li
428.472 471.96 li
429.84 472.032 li
431.136 472.104 li
434.88 472.104 li
446.112 471.888 mo
447.12 471.888 li
448.488 471.816 li
449.784 471.816 li
451.152 471.744 li
457.344 471.744 li
468.576 471.744 mo
473.76 471.744 li
475.056 471.816 li
476.424 471.816 li
477.72 471.888 li
479.088 471.96 li
479.808 472.032 li
490.968 472.896 mo
491.04 472.896 li
492.336 473.04 li
493.704 473.184 li
495 473.256 li
496.368 473.4 li
497.664 473.472 li
499.032 473.544 li
500.328 473.616 li
501.696 473.688 li
@
501.696 473.688 mo
502.2 473.688 li
513.432 474.12 mo
513.648 474.12 li
514.944 474.192 li
516.312 474.264 li
517.608 474.264 li
518.976 474.336 li
520.272 474.336 li
521.64 474.408 li
522.432 474.408 li
207 453.24 mo
207.648 453.168 li
208.944 453.24 li
210.312 453.384 li
211.608 453.528 li
212.976 453.6 li
214.272 453.528 li
215.64 453.24 li
215.928 453.168 li
222.264 450.936 mo
222.264 450.936 li
223.344 450.864 li
229.032 454.176 mo
230.256 455.472 li
232.92 458.136 li
234.288 459.072 li
235.584 459.72 li
235.872 459.72 li
242.208 457.992 mo
242.208 457.992 li
243.144 457.344 li
248.616 453.528 mo
248.904 453.312 li
250.2 452.664 li
251.568 452.088 li
252.864 451.512 li
254.232 451.008 li
256.824 449.856 li
262.872 446.832 mo
263.52 446.544 li
263.88 446.328 li
270.144 443.88 mo
270.144 443.88 li
271.512 443.664 li
272.808 443.592 li
274.176 443.664 li
275.472 443.88 li
276.84 444.096 li
278.136 444.456 li
279 444.672 li
285.48 446.4 mo
286.128 446.472 li
286.632 446.544 li
293.328 446.4 mo
295.488 446.4 li
296.784 446.472 li
298.152 446.688 li
299.448 446.904 li
300.744 447.336 li
302.112 447.768 li
308.232 450.72 mo
308.736 451.008 li
309.168 451.224 li
315.288 454.176 mo
315.432 454.176 li
316.728 454.752 li
318.096 455.256 li
319.392 455.688 li
320.76 456.048 li
322.056 456.408 li
323.424 456.624 li
323.856 456.696 li
330.552 456.984 mo
331.344 456.84 li
331.704 456.84 li
338.184 455.112 mo
339.336 454.68 li
340.704 454.104 li
342 453.6 li
343.368 453.096 li
344.664 452.592 li
346.032 452.088 li
346.608 451.944 li
353.232 450.792 mo
354.024 450.72 li
@
354.024 450.72 mo
354.312 450.792 li
361.008 451.512 mo
361.944 451.728 li
363.312 452.016 li
364.608 452.304 li
365.976 452.52 li
367.272 452.808 li
368.64 453.024 li
369.864 453.24 li
376.56 453.96 mo
377.64 453.96 li
384.408 453.816 mo
385.92 453.816 li
387.288 453.744 li
388.584 453.816 li
389.952 453.816 li
392.544 453.96 li
393.336 454.032 li
399.888 455.472 mo
400.536 455.76 li
400.968 455.904 li
407.088 458.784 mo
407.232 458.856 li
408.528 459.576 li
409.896 460.224 li
411.192 460.944 li
412.56 461.592 li
413.856 462.24 li
415.08 462.816 li
421.344 465.336 mo
421.848 465.48 li
422.424 465.696 li
428.976 467.28 mo
431.136 467.64 li
432.504 467.784 li
433.8 467.856 li
435.168 468 li
436.464 468.072 li
437.904 468.072 li
444.6 468.072 mo
445.752 468 li
452.448 467.712 mo
453.744 467.712 li
455.112 467.64 li
456.408 467.64 li
457.776 467.568 li
461.448 467.568 li
468.216 467.496 mo
468.432 467.496 li
469.296 467.568 li
476.064 467.928 mo
476.424 468 li
477.72 468.144 li
479.088 468.288 li
480.384 468.504 li
481.752 468.72 li
484.344 469.152 li
484.92 469.224 li
491.544 470.448 mo
492.336 470.664 li
492.624 470.664 li
499.32 471.816 mo
500.328 471.96 li
501.696 472.104 li
502.992 472.248 li
504.36 472.392 li
505.656 472.536 li
507.024 472.68 li
508.248 472.752 li
514.944 473.184 mo
514.944 473.184 li
516.096 473.256 li
522.792 473.4 mo
524.304 473.4 li
525.6 473.328 li
531.792 473.328 li
538.56 473.4 mo
538.92 473.472 li
539.64 473.472 li
546.408 473.688 mo
546.912 473.688 li
207 451.944 mo
207.648 452.016 li
208.08 452.088 li
214.704 452.304 mo
215.64 451.944 li
215.784 451.872 li
220.824 447.408 mo
221.616 446.616 li
227.376 443.664 mo
227.592 443.664 li
228.456 443.952 li
234.504 446.904 mo
235.584 447.12 li
242.064 445.392 mo
243.072 444.888 li
249.408 442.656 mo
250.2 442.512 li
250.56 442.512 li
257.184 441.72 mo
258.192 441.432 li
258.264 441.432 li
264.312 438.48 mo
264.888 438.192 li
265.32 437.904 li
271.512 435.456 mo
272.664 435.456 li
279.216 436.896 mo
279.504 436.968 li
280.224 437.256 li
286.704 439.056 mo
287.496 439.128 li
287.856 439.128 li
294.552 439.128 mo
295.704 439.128 li
302.184 440.928 mo
303.192 441.432 li
308.88 445.032 mo
309.816 445.68 li
315.504 449.208 mo
316.512 449.712 li
322.776 452.16 mo
323.424 452.304 li
323.856 452.376 li
330.552 452.592 mo
331.344 452.448 li
331.632 452.376 li
@
337.968 450 mo
338.04 449.928 li
338.904 449.424 li
344.664 445.896 mo
344.664 445.896 li
345.6 445.32 li
351.72 442.584 mo
352.656 442.296 li
352.8 442.224 li
359.496 441.648 mo
360.648 441.72 li
367.272 442.872 mo
367.272 442.872 li
368.352 443.088 li
374.904 444.744 mo
375.264 444.816 li
375.984 445.032 li
382.608 446.184 mo
383.256 446.328 li
383.76 446.328 li
390.384 447.408 mo
391.248 447.624 li
391.464 447.624 li
397.944 449.568 mo
398.952 450 li
404.928 453.096 mo
405.864 453.672 li
405.936 453.672 li
411.84 456.912 mo
412.848 457.416 li
419.04 460.08 mo
419.184 460.152 li
420.048 460.512 li
426.6 462.24 mo
427.176 462.312 li
427.68 462.384 li
434.376 462.96 mo
435.528 462.96 li
442.224 462.888 mo
443.16 462.816 li
443.376 462.816 li
450.072 462.456 mo
451.152 462.384 li
451.224 462.384 li
457.92 462.168 mo
459.072 462.168 li
465.84 462.312 mo
466.92 462.384 li
473.616 463.032 mo
473.76 463.032 li
474.768 463.176 li
481.392 464.4 mo
481.752 464.544 li
482.472 464.688 li
489.024 466.272 mo
489.672 466.416 li
490.104 466.488 li
496.728 467.928 mo
497.664 468.144 li
497.808 468.144 li
504.432 469.296 mo
505.512 469.512 li
512.208 470.52 mo
512.352 470.592 li
513.288 470.664 li
519.984 471.384 mo
520.272 471.384 li
521.136 471.456 li
527.832 471.744 mo
528.984 471.744 li
535.752 471.96 mo
536.256 471.96 li
536.832 472.032 li
543.6 472.248 mo
544.68 472.248 li
207 451.584 mo
207.648 451.728 li
208.944 451.944 li
210.312 452.16 li
211.608 452.304 li
212.976 452.16 li
214.272 451.8 li
215.64 451.152 li
215.712 451.08 li
220.248 446.184 mo
220.896 445.248 li
225.36 440.28 mo
226.296 439.632 li
232.776 440.28 mo
232.92 440.352 li
233.784 440.64 li
240.192 439.416 mo
240.912 439.056 li
242.208 438.336 li
243.576 437.688 li
244.872 437.112 li
246.24 436.752 li
247.536 436.464 li
248.544 436.392 li
255.24 436.968 mo
255.528 437.04 li
256.392 437.04 li
262.872 435.384 mo
263.52 435.024 li
263.808 434.88 li
269.712 431.496 mo
270.144 431.28 li
270.72 431.136 li
277.344 431.064 mo
278.136 431.28 li
279.504 431.712 li
280.8 432.216 li
282.168 432.72 li
283.464 433.224 li
284.832 433.584 li
285.912 433.8 li
292.608 434.304 mo
292.824 434.304 li
293.76 434.376 li
300.24 436.104 mo
300.744 436.392 li
301.176 436.608 li
306.864 440.352 mo
307.728 441 li
313.416 444.672 mo
314.064 445.032 li
315.432 445.752 li
316.728 446.4 li
@
316.728 446.4 mo
318.096 447.048 li
319.392 447.552 li
320.76 448.056 li
321.624 448.272 li
328.248 449.136 mo
328.752 449.064 li
329.328 448.992 li
335.736 446.832 mo
336.672 446.328 li
342.36 442.656 mo
343.296 442.008 li
349.128 438.696 mo
349.992 438.336 li
351.36 437.904 li
352.656 437.472 li
354.024 437.256 li
355.32 437.04 li
356.688 436.968 li
357.912 436.968 li
364.608 437.616 mo
364.608 437.616 li
365.688 437.832 li
372.24 439.488 mo
372.6 439.632 li
373.32 439.776 li
379.8 441.504 mo
380.592 441.648 li
380.952 441.648 li
387.576 442.872 mo
388.584 443.088 li
389.952 443.376 li
391.248 443.736 li
392.544 444.024 li
393.912 444.456 li
395.208 444.888 li
396.216 445.248 li
402.264 448.2 mo
403.2 448.776 li
408.96 452.304 mo
409.896 452.88 li
415.872 456.048 mo
416.52 456.408 li
416.88 456.552 li
423.144 458.928 mo
423.144 458.928 li
424.512 459.288 li
425.808 459.576 li
427.176 459.792 li
428.472 459.936 li
429.84 460.08 li
431.136 460.152 li
432.072 460.152 li
438.768 460.152 mo
439.92 460.152 li
446.616 459.72 mo
447.12 459.72 li
447.768 459.648 li
454.464 459.432 mo
455.616 459.432 li
462.312 459.648 mo
463.104 459.72 li
464.4 459.792 li
465.768 459.936 li
467.064 460.008 li
468.432 460.152 li
469.728 460.368 li
471.096 460.512 li
471.24 460.584 li
477.936 461.592 mo
479.016 461.808 li
485.64 462.96 mo
485.712 462.96 li
486.792 463.176 li
493.344 464.688 mo
494.424 464.904 li
500.976 466.488 mo
501.696 466.632 li
502.992 466.92 li
504.36 467.28 li
505.656 467.568 li
507.024 467.856 li
508.32 468.144 li
509.688 468.36 li
509.76 468.432 li
516.456 469.512 mo
517.536 469.656 li
524.232 470.232 mo
524.304 470.232 li
525.384 470.304 li
532.08 470.52 mo
532.296 470.592 li
533.232 470.592 li
539.928 470.88 mo
541.584 470.88 li
542.952 470.952 li
545.544 471.096 li
546.912 471.168 li
@
1.8 lw
407.232 531.792 mo
401.76 546.264 li
407.232 531.792 mo
412.776 546.264 li
403.776 541.44 mo
410.688 541.44 li
416.232 531.792 mo
416.232 542.16 li
416.952 544.248 li
418.32 545.616 li
420.408 546.264 li
421.776 546.264 li
423.864 545.616 li
425.232 544.248 li
425.952 542.16 li
425.952 531.792 li
200.952 43.272 mo
200.952 57.744 li
196.128 43.272 mo
205.776 43.272 li
208.512 43.272 mo
209.232 43.92 li
209.952 43.272 li
209.232 42.552 li
208.512 43.272 li
209.232 48.096 mo
209.232 57.744 li
214.776 48.096 mo
214.776 57.744 li
214.776 50.832 mo
216.864 48.816 li
218.232 48.096 li
220.32 48.096 li
221.688 48.816 li
222.336 50.832 li
222.336 57.744 li
222.336 50.832 mo
224.424 48.816 li
225.792 48.096 li
227.88 48.096 li
229.248 48.816 li
229.968 50.832 li
229.968 57.744 li
234.792 52.272 mo
243.072 52.272 li
243.072 50.832 li
242.424 49.4641 li
241.704 48.816 li
240.336 48.096 li
238.248 48.096 li
236.88 48.816 li
235.512 50.184 li
234.792 52.272 li
234.792 53.64 li
235.512 55.728 li
236.88 57.096 li
238.248 57.744 li
240.336 57.744 li
241.704 57.096 li
243.072 55.728 li
247.896 51.552 mo
260.352 51.552 li
269.352 43.272 mo
263.808 57.744 li
269.352 43.272 mo
274.896 57.744 li
265.896 52.92 mo
272.808 52.92 li
276.984 48.096 mo
281.088 57.744 li
285.264 48.096 mo
281.088 57.744 li
288.72 52.272 mo
297 52.272 li
297 50.832 li
296.28 49.4641 li
295.632 48.816 li
294.264 48.096 li
292.176 48.096 li
290.808 48.816 li
289.368 50.184 li
288.72 52.272 li
288.72 53.64 li
289.368 55.728 li
290.808 57.096 li
292.176 57.744 li
294.264 57.744 li
295.632 57.096 li
297 55.728 li
301.824 48.096 mo
301.824 57.744 li
301.824 52.272 mo
302.544 50.184 li
303.912 48.816 li
305.28 48.096 li
307.368 48.096 li
318.456 48.096 mo
318.456 57.744 li
318.456 50.184 mo
317.016 48.816 li
315.648 48.096 li
313.56 48.096 li
312.192 48.816 li
310.824 50.184 li
310.104 52.272 li
310.104 53.64 li
310.824 55.728 li
312.192 57.096 li
313.56 57.744 li
315.648 57.744 li
317.016 57.096 li
318.456 55.728 li
331.56 48.096 mo
331.56 59.184 li
330.84 61.2 li
330.192 61.92 li
328.824 62.64 li
326.736 62.64 li
325.368 61.92 li
331.56 50.184 mo
330.192 48.816 li
328.824 48.096 li
326.736 48.096 li
325.368 48.816 li
323.928 50.184 li
323.28 52.272 li
323.28 53.64 li
323.928 55.728 li
@
323.928 55.728 mo
325.368 57.096 li
326.736 57.744 li
328.824 57.744 li
330.192 57.096 li
331.56 55.728 li
336.384 52.272 mo
344.664 52.272 li
344.664 50.832 li
344.016 49.4641 li
343.296 48.816 li
341.928 48.096 li
339.84 48.096 li
338.472 48.816 li
337.104 50.184 li
336.384 52.272 li
336.384 53.64 li
337.104 55.728 li
338.472 57.096 li
339.84 57.744 li
341.928 57.744 li
343.296 57.096 li
344.664 55.728 li
357.12 43.272 mo
357.12 57.744 li
357.12 50.184 mo
355.752 48.816 li
354.384 48.096 li
352.296 48.096 li
350.928 48.816 li
349.56 50.184 li
348.84 52.272 li
348.84 53.64 li
349.56 55.728 li
350.928 57.096 li
352.296 57.744 li
354.384 57.744 li
355.752 57.096 li
357.12 55.728 li
376.488 43.272 mo
376.488 57.744 li
371.664 43.272 mo
381.312 43.272 li
387.504 48.096 mo
386.136 48.816 li
384.768 50.184 li
384.048 52.272 li
384.048 53.64 li
384.768 55.728 li
386.136 57.096 li
387.504 57.744 li
389.592 57.744 li
390.96 57.096 li
392.4 55.728 li
393.048 53.64 li
393.048 52.272 li
392.4 50.184 li
390.96 48.816 li
389.592 48.096 li
387.504 48.096 li
397.872 48.096 mo
397.872 57.744 li
397.872 52.272 mo
398.592 50.184 li
399.96 48.816 li
401.328 48.096 li
403.416 48.096 li
414.504 48.096 mo
414.504 62.64 li
414.504 50.184 mo
413.136 48.816 li
411.696 48.096 li
409.68 48.096 li
408.24 48.816 li
406.872 50.184 li
406.224 52.272 li
406.224 53.64 li
406.872 55.728 li
408.24 57.096 li
409.68 57.744 li
411.696 57.744 li
413.136 57.096 li
414.504 55.728 li
420.048 48.096 mo
420.048 55.0081 li
420.696 57.096 li
422.064 57.744 li
424.152 57.744 li
425.52 57.096 li
427.608 55.0081 li
427.608 48.096 mo
427.608 57.744 li
432.432 52.272 mo
440.784 52.272 li
440.784 50.832 li
440.064 49.4641 li
439.344 48.816 li
437.976 48.096 li
435.888 48.096 li
434.52 48.816 li
433.152 50.184 li
432.432 52.272 li
432.432 53.64 li
433.152 55.728 li
434.52 57.096 li
435.888 57.744 li
437.976 57.744 li
439.344 57.096 li
440.784 55.728 li
452.52 50.184 mo
451.8 48.816 li
449.712 48.096 li
@
449.712 48.096 mo
447.696 48.096 li
445.608 48.816 li
444.888 50.184 li
445.608 51.552 li
446.976 52.272 li
450.432 52.92 li
451.8 53.64 li
452.52 55.0081 li
452.52 55.728 li
451.8 57.096 li
449.712 57.744 li
447.696 57.744 li
445.608 57.096 li
444.888 55.728 li
473.256 40.4641 mo
471.816 41.9041 li
470.448 43.92 li
469.08 46.728 li
468.36 50.184 li
468.36 52.92 li
469.08 56.376 li
470.448 59.184 li
471.816 61.2 li
473.256 62.64 li
479.448 46.0081 mo
480.816 45.36 li
482.904 43.272 li
482.904 57.744 li
491.904 46.728 mo
491.904 46.0081 li
492.552 44.64 li
493.272 43.92 li
494.64 43.272 li
497.448 43.272 li
498.816 43.92 li
499.464 44.64 li
500.184 46.0081 li
500.184 47.376 li
499.464 48.816 li
498.096 50.832 li
491.184 57.744 li
500.904 57.744 li
505.728 51.552 mo
518.184 51.552 li
525.096 46.0081 mo
526.464 45.36 li
528.552 43.272 li
528.552 57.744 li
540.288 43.272 mo
538.2 43.92 li
537.48 45.36 li
537.48 46.728 li
538.2 48.096 li
539.568 48.816 li
542.376 49.4641 li
544.392 50.184 li
545.832 51.552 li
546.48 52.92 li
546.48 55.0081 li
545.832 56.376 li
545.112 57.096 li
543.024 57.744 li
540.288 57.744 li
538.2 57.096 li
537.48 56.376 li
536.832 55.0081 li
536.832 52.92 li
537.48 51.552 li
538.92 50.184 li
540.936 49.4641 li
543.744 48.816 li
545.112 48.096 li
545.832 46.728 li
545.832 45.36 li
545.112 43.92 li
543.024 43.272 li
540.288 43.273 li
565.848 43.272 mo
564.48 43.92 li
563.112 45.36 li
562.392 46.728 li
561.672 48.816 li
561.672 52.272 li
562.392 54.288 li
563.112 55.728 li
564.48 57.096 li
565.848 57.744 li
568.584 57.744 li
570.024 57.096 li
571.392 55.728 li
572.04 54.288 li
572.76 52.272 li
572.76 48.816 li
572.04 46.728 li
571.392 45.36 li
570.024 43.92 li
568.584 43.272 li
565.848 43.272 li
577.584 43.272 mo
577.584 57.744 li
577.584 43.272 mo
583.776 43.272 li
585.864 43.92 li
586.584 44.64 li
587.232 46.0081 li
587.232 47.376 li
586.584 48.816 li
585.864 49.4641 li
583.776 50.184 li
577.584 50.184 li
582.408 50.184 mo
587.232 57.744 li
592.128 43.272 mo
592.128 57.744 li
592.128 43.272 mo
598.32 43.272 li
600.408 43.92 li
601.056 44.64 li
601.776 46.0081 li
601.776 48.096 li
601.056 49.4641 li
600.408 50.184 li
598.32 50.832 li
592.128 50.832 li
605.952 40.4641 mo
607.32 41.9041 li
608.688 43.92 li
@
608.688 43.92 mo
610.056 46.728 li
610.776 50.184 li
610.776 52.92 li
610.056 56.376 li
608.688 59.184 li
607.32 61.2 li
605.952 62.64 li
149.472 347.688 mo
149.472 339.408 li
148.104 339.408 li
146.736 340.056 li
146.016 340.776 li
145.368 342.144 li
145.368 344.232 li
146.016 345.6 li
147.384 346.968 li
149.472 347.688 li
150.84 347.688 li
152.928 346.968 li
154.296 345.6 li
155.016 344.232 li
155.016 342.144 li
154.296 340.776 li
152.928 339.408 li
145.368 334.584 mo
155.016 334.584 li
149.472 334.584 mo
147.384 333.864 li
146.016 332.496 li
145.368 331.128 li
145.368 329.04 li
145.368 317.952 mo
156.384 317.952 li
158.472 318.672 li
159.192 319.32 li
159.84 320.76 li
159.84 322.776 li
159.192 324.216 li
147.384 317.952 mo
146.016 319.32 li
145.368 320.76 li
145.368 322.776 li
146.016 324.216 li
147.384 325.584 li
149.472 326.232 li
150.84 326.232 li
152.928 325.584 li
154.296 324.216 li
155.016 322.776 li
155.016 320.76 li
154.296 319.32 li
152.928 317.952 li
147.384 305.568 mo
146.016 306.216 li
145.368 308.304 li
145.368 310.392 li
146.016 312.408 li
147.384 313.128 li
148.824 312.408 li
149.472 311.04 li
150.192 307.584 li
150.84 306.216 li
152.28 305.568 li
152.928 305.568 li
154.296 306.216 li
155.016 308.304 li
155.016 310.392 li
154.296 312.408 li
152.928 313.128 li
137.736 284.832 mo
139.104 286.2 li
141.192 287.568 li
143.928 288.936 li
147.384 289.656 li
150.192 289.656 li
153.648 288.936 li
156.384 287.568 li
158.472 286.2 li
159.84 284.832 li
145.368 280.656 mo
155.016 273.024 li
145.368 273.024 mo
155.016 280.656 li
143.28 255.744 mo
142.56 254.376 li
140.472 252.288 li
155.016 252.288 li
140.472 239.904 mo
141.192 241.92 li
143.28 243.36 li
146.736 244.008 li
148.824 244.008 li
152.28 243.36 li
154.296 241.92 li
155.016 239.904 li
155.016 238.464 li
154.296 236.448 li
@
154.296 236.448 mo
152.28 235.008 li
148.824 234.36 li
146.736 234.36 li
143.28 235.008 li
141.192 236.448 li
140.472 238.464 li
140.472 239.904 li
133.056 229.68 mo
133.056 223.992 li
137.232 227.088 li
137.232 225.504 li
137.736 224.496 li
138.24 223.992 li
139.824 223.488 li
140.832 223.488 li
142.416 223.992 li
143.424 225 li
143.928 226.584 li
143.928 228.096 li
143.424 229.68 li
142.92 230.184 li
141.912 230.688 li
136.728 213.624 mo
138.24 214.128 li
139.32 215.136 li
139.824 216.72 li
139.824 217.224 li
139.32 218.808 li
138.24 219.816 li
136.728 220.32 li
136.152 220.32 li
134.64 219.816 li
133.56 218.808 li
133.056 217.224 li
133.056 216.72 li
133.56 215.136 li
134.64 214.128 li
136.728 213.624 li
139.32 213.624 li
141.912 214.128 li
143.424 215.136 li
143.928 216.72 li
143.928 217.728 li
143.424 219.312 li
142.416 219.816 li
137.736 209.448 mo
139.104 208.08 li
141.192 206.712 li
143.928 205.344 li
147.384 204.624 li
150.192 204.624 li
153.648 205.344 li
156.384 206.712 li
158.472 208.08 li
159.84 209.448 li
@
grestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
[/CSD [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
